import{_ as k}from"./change-password-dialog-DAvSz_BT.js";import{A as j,a as x,b as I,_,V as N}from"./VDataTableVirtual--XFLD9jr.js";import{M as f,t as d,N as y,_ as v,Q as u,R as p,ay as b,L as a,aX as A,aB as D,aC as B,m as L,aD as n,P as l,O,aa as i}from"./admin-drawer-panel-B4-04ET4.js";import{D as z}from"./datetime-column-D3I95kw3.js";import{a as C}from"./main-BJxn-WA7.js";import{a as c}from"./VSlideGroup-IIebYuJm.js";import{V as U}from"./VCheckbox-CFqm2IhY.js";import{V}from"./VCheckboxBtn-BjWW08N8.js";import"./confirm-footer-oTUv06_v.js";import"./confirm-dialog-0mqMQack.js";import"./VSelect-CAEbdtAK.js";import"./VSelectionControl-BoyRbIct.js";import"./VTable-XNBBnB2q.js";import"./filter-D95Y3XYa.js";const R=["username","isStaff","isActive","groups"];Object.freeze(R);const g={username:"",password:"",passwordConfirm:"",isStaff:!1,isActive:!0,groups:[]};Object.freeze(g);const J={name:"AdminUserCreateUpdateInputs",components:{AdminRelationPicker:j},props:{oldRow:{type:[Object,Boolean],default:!1}},emits:["change"],data(){return{rules:{username:[e=>!!e||"Username is required",e=>!!e&&!this.usernames.has(e.trim())||"Username already used"],password:[e=>!!e||"Password is required"],passwordConfirm:[e=>e===this.row.password||"Passwords must match"]},row:C.cloneDeep(this.oldRow||g)}},computed:{...f(d,{groups:e=>e.groups,users:e=>e.users}),usernames(){return this.nameSet(this.users,"username",this.oldRow,!0)}},watch:{row:{handler(e){this.$emit("change",e)},deep:!0},oldRow:{handler(e){this.row=C.cloneDeep(e)},deep:!0}},methods:{...y(d,["nameSet"])},UPDATE_KEYS:R,EMPTY_ROW:g},K={key:0};function M(e,o,h,S,s,T){const m=u("AdminRelationPicker");return p(),b("div",null,[a(c,{modelValue:s.row.username,"onUpdate:modelValue":o[0]||(o[0]=r=>s.row.username=r),autocomplete:"username",label:"Username",rules:s.rules.username,clearable:"",autofocus:"",onKeydown:o[1]||(o[1]=A(r=>e.$refs.password.focus(),["enter"]))},null,8,["modelValue","rules"]),h.oldRow?D("",!0):(p(),b("div",K,[a(c,{ref:"password",modelValue:s.row.password,"onUpdate:modelValue":o[2]||(o[2]=r=>s.row.password=r),autocomplete:"new-password",label:"Password",rules:s.rules.password,clearable:"",type:"password",onKeydown:o[3]||(o[3]=A(r=>e.$refs.passwordConfirm.focus(),["enter"]))},null,8,["modelValue","rules"]),a(c,{ref:"passwordConfirm",modelValue:s.row.passwordConfirm,"onUpdate:modelValue":o[4]||(o[4]=r=>s.row.passwordConfirm=r),autocomplete:"new-password",label:"Confirm Password",rules:s.rules.passwordConfirm,clearable:"",type:"password"},null,8,["modelValue","rules"])])),a(U,{modelValue:s.row.isStaff,"onUpdate:modelValue":o[5]||(o[5]=r=>s.row.isStaff=r),label:"Is Staff"},null,8,["modelValue"]),a(U,{modelValue:s.row.isActive,"onUpdate:modelValue":o[6]||(o[6]=r=>s.row.isActive=r),label:"Is Active"},null,8,["modelValue"]),a(m,{modelValue:s.row.groups,"onUpdate:modelValue":o[7]||(o[7]=r=>s.row.groups=r),label:"Groups",objs:e.groups,"title-key":"name","group-type":""},null,8,["modelValue","objs"])])}const Y=v(J,[["render",M]]),G={name:"AdminUsersTab",components:{AdminDeleteRowDialog:x,ChangePasswordDialog:k,AdminCreateUpdateDialog:I,DateTimeColumn:z,RelationChips:_},data(){return{AdminUserCreateUpdateInputs:B(Y),headers:[{title:"Username",key:"username",align:"start"},{title:"Staff",key:"isStaff"},{title:"Active",key:"isActive"},{title:"Groups",key:"groups"},{title:"Last Active",key:"lastActive"},{title:"Last Login",key:"lastLogin"},{title:"Joined",key:"dateJoined"},{title:"Actions",key:"actions",sortable:!1}]}},computed:{...f(d,{users:e=>e.users,groups:e=>e.groups}),...f(L,{me:e=>e.user})},mounted(){this.loadTables(["Group","User"])},methods:{...y(d,["loadTables"])}},q={class:"tabHeader"},X=n("td",{class:"adminNoData",colspan:"100%"},[i(" No Users. "),n("div",null,[i(" This is an error. There should always be at least one Staff user."),n("br"),i(" You should not be able to see this page"),n("br"),i(" You should restart Codex with the CODEX_RESET_ADMIN=1 variable set."),n("br"),i(" See the "),n("a",{href:"https://github.com/ajslater/codex#reset-the-admin-password",target:"_blank"}," README ")])],-1);function F(e,o,h,S,s,T){const m=u("AdminCreateUpdateDialog"),r=_,w=u("DateTimeColumn"),P=k,E=u("AdminDeleteRowDialog");return p(),b("div",null,[n("header",q,[a(m,{table:"User",inputs:s.AdminUserCreateUpdateInputs,"max-width":"20em"},null,8,["inputs"])]),a(N,{"fixed-header":"","item-value":"pk","item-title":"username",headers:s.headers,items:e.users,class:"adminTable"},{"no-data":l(()=>[X]),"item.isStaff":l(({item:t})=>[a(V,{"model-value":t.isStaff,disabled:""},null,8,["model-value"])]),"item.isActive":l(({item:t})=>[a(V,{"model-value":t.isActive,disabled:""},null,8,["model-value"])]),"item.groups":l(({item:t})=>[a(r,{pks:t.groups,objs:e.groups,"title-key":"name","group-type":""},null,8,["pks","objs"])]),"item.lastActive":l(({item:t})=>[a(w,{dttm:t.lastActive},null,8,["dttm"])]),"item.lastLogin":l(({item:t})=>[a(w,{dttm:t.lastLogin},null,8,["dttm"])]),"item.dateJoined":l(({item:t})=>[a(w,{dttm:t.dateJoined},null,8,["dttm"])]),"item.actions":l(({item:t})=>[a(m,{table:"User",inputs:s.AdminUserCreateUpdateInputs,"old-row":t,"max-width":"20em",size:"small",density:"compact"},null,8,["inputs","old-row"]),a(P,{user:t,"is-admin-mode":!0,size:"small",density:"compact"},null,8,["user"]),e.me.id!==t.pk?(p(),O(E,{key:0,table:"User",pk:t.pk,name:t.username,size:"small",density:"compact"},null,8,["pk","name"])):D("",!0)]),_:2},1032,["headers","items"])])}const me=v(G,[["render",F]]);export{me as default};
