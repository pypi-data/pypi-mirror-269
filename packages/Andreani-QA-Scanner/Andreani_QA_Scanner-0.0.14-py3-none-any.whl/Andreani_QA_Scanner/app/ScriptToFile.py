import os.path
import random
import json
import tkinter as tk
from tkinter import filedialog
import datetime
from docx import Document
from docx.shared import Inches
from PIL import Image
import io
import base64

class ScriptToFile:
    def __init__(self, steps_data=None, objects_data=None):
        self.context_frame = 'ROOT'
        self.web_is_open = False
        self.steps_data = steps_data
        self.objects_data = objects_data
        self.browser = "Edge"
        self.ref_metadata = datetime.datetime.now().strftime('%H_%M_%S_%f')

    def main(self):
        return self.generate_file

    def generate_file(self, file="py"):
        """
            Returns:
                Genera un archivo .py con el script de la automatización.
        """
        my_doc = Document()
        root = tk.Tk()
        root.withdraw()  # Oculta la ventana principal de Tkinter
        target_path = filedialog.askdirectory()
        if target_path != "":
            json_objects = self.build_json_objects()
            formatted_json = json.dumps(json_objects, indent=4)
            steps_list_to_py = ["from Andreani_QA_Selenium.Selenium import Selenium", "", "import pymsgbox" ,"",
                                      f"Selenium.json_strings ={formatted_json}"]
            my_doc.add_heading('Evidencia', level=1)
            my_doc.add_heading(f'Caso de prueba: doc_evidencia_{self.ref_metadata}', level=1)
            my_doc.add_heading('Pasos realizados:', level=2)

            for step in self.steps_data:
                if step["event"] == "open browser":
                    self.set_browser(step)
                    my_doc.add_paragraph(f'Paso {step["order"]}: Abrir el navegador {self.browser}', style='ListBullet')
                if step["event"] == "url log":
                    steps_list_to_py += self.build_step_open_browser(step)
                    my_doc.add_paragraph(f'Paso {step["order"]}: Ingresar a "{step["value"]}"', style='ListBullet')
                if step["event"] == "click":
                    steps_list_to_py += self.build_step_click_element(step, json_objects)
                    my_doc.add_paragraph(f'Paso {step["order"]}: Realizar click en...', style='ListBullet')
                    my_doc.add_picture(io.BytesIO(base64.b64decode(step["screenshot"])), width=Inches(5.0))
                if step["event"] == "input":
                    my_doc.add_paragraph(f'Paso {step["order"]}: Escribir "{step["value"]}" en...', style='ListBullet')
                    my_doc.add_picture(io.BytesIO(base64.b64decode(step["screenshot"])), width=Inches(5.0))
                    steps_list_to_py += self.build_step_write_in_element(step, json_objects)
                if step["event"] == "send_key":
                    my_doc.add_paragraph(f'Paso {step["order"]}: Presionar "{step["value"]}" en...', style='ListBullet')
                    my_doc.add_picture(io.BytesIO(base64.b64decode(step["screenshot"])), width=Inches(5.0))
                    steps_list_to_py += self.build_step_send_key_in_element(step, json_objects)
                if step["event"] == "screenshot":
                    steps_list_to_py += self.build_step_screenshot(step)
            steps_list_to_py += self.build_step_add_message_box()
            while True:
                try:
                    if file == "py":
                        file_path = os.path.join(target_path, f"mi_script_{self.ref_metadata}.py")
                        with open(file_path, 'w', encoding="UTF-8") as script_file:
                            for step_line in steps_list_to_py:
                                script_file.write(step_line + '\n')
                            script_file.close()
                        root.destroy()
                        return "Script generado en " + os.path.normpath(file_path).replace('\\', '/')
                    if file == "doc":
                        file_path = os.path.join(target_path, f"evidence_{self.ref_metadata}.docx")
                        my_doc.save(file_path)
                        root.destroy()
                        return "Documento generado en " + os.path.normpath(file_path).replace('\\', '/')
                except RuntimeError:
                    root.destroy()
        else:
            root.destroy()
            return ""

    def set_browser(self, step):
        self.browser = step['value'].upper()


    def generate_object_file(self):
        root = tk.Tk()
        root.withdraw()  # Oculta la ventana principal de Tkinter
        file_path = os.path.join(filedialog.askdirectory(), f"mis_objetos_{self.ref_metadata}.json")
        with open(file_path, 'w') as archivo:
            json.dump(self.objects_data, archivo, ensure_ascii=False, indent=4)
        root.destroy()
        return "Objectos guardados en " + os.path.normpath(file_path).replace('\\', '/')

    def build_step_open_browser(self, step: dict):
        """
            Args:
                step (dict): Metadatos del step capturado.
            Returns:
                Procesa las acciones de apertura de navegador en una lista.
        """
        if self.web_is_open:
            return [f"Selenium.driver.get(\"{step['target']}\")"]
        else:
            self.web_is_open = True
            return [f"Selenium.open_browser(Selenium, \"{step['target']}\", browser='{self.browser}')"]

    def build_step_add_message_box(self):
        return [r"if pymsgbox.confirm('La ejecución del script a finalizado.\n "
                r"¿Desea cerrar el navegador?', 'Confirmación') != 'OK': input()"]

    def build_step_click_element(self, step: dict, json_objects: dict):
        """
            Args:
                step (dict): Metadatos del step capturado.
                json_objects (dict): Repositorio de objetos.

            Returns:
                Procesa las acciones de click en una lista.
        """
        actions = []
        if step["target"]["FRAME"] != self.context_frame and step["target"]["FRAME"] == "ROOT":
            self.context_frame = "ROOT"
            actions = [f"Selenium.switch_to_default_frame(Selenium)"]
        if step["target"]["FRAME"] != self.context_frame and step["target"]["FRAME"] != "ROOT":
            self.context_frame = step["target"]["FRAME"]
            name_object = self.get_name_object(step["target"]["FRAME"], json_objects)
            actions = [f"Selenium.switch_to_iframe(Selenium, \"{name_object}\")"]
        name_object = self.get_name_object(step["target"]["XPATH"], json_objects)
        actions.append(f"Selenium.get_element(Selenium, \"{name_object}\").click()")
        return actions

    def build_step_write_in_element(self, step, json_objects):
        """
            Args:
                step (dict): Metadatos del step capturado.
                json_objects (dict): Repositorio de objetos.

            Returns:
                Procesa las acciones de escritura en una lista.
        """
        actions = []
        if step["target"]["FRAME"] != self.context_frame and step["target"]["FRAME"] == "ROOT":
            self.context_frame = "ROOT"
            actions = [f"Selenium.switch_to_default_frame(Selenium)"]
        if step["target"]["FRAME"] != self.context_frame:
            self.context_frame = step["target"]["FRAME"]
            name_object = self.get_name_object(step["target"]["FRAME"], json_objects)
            actions = [f"Selenium.switch_to_iframe(Selenium, \"{name_object}\")"]
        name_object = self.get_name_object(step["target"]["XPATH"], json_objects)
        actions.append(f"Selenium.get_element(Selenium, \"{name_object}\").send_keys(\"{step['value']}\")")
        return actions


    def build_step_send_key_in_element(self, step, json_objects):
        """
            Args:
                step (dict): Metadatos del step capturado.
                json_objects (dict): Repositorio de objetos.

            Returns:
                Procesa las acciones de escritura en una lista.
        """
        actions = []
        if step["target"]["FRAME"] != self.context_frame and step["target"]["FRAME"] == "ROOT":
            self.context_frame = "ROOT"
            actions = [f"Selenium.switch_to_default_frame(Selenium)"]
        if step["target"]["FRAME"] != self.context_frame:
            self.context_frame = step["target"]["FRAME"]
            name_object = self.get_name_object(step["target"]["FRAME"], json_objects)
            actions = [f"Selenium.switch_to_iframe(Selenium, \"{name_object}\")"]
        name_object = self.get_name_object(step["target"]["XPATH"], json_objects)
        actions.append(f"Selenium.get_element(Selenium, \"{name_object}\").send_special_key(\"{step['value']}\")")
        return actions

    def build_step_screenshot(self, step):
        """
            Returns:
                Procesa las acciones screenshot en una lista.
        """
        return [f"Selenium.screenshot(Selenium, '{step['value']}')"]

    def build_json_objects(self):
        """
            Returns:
                Archivo json que funciona como repositorio de objetos a partir de los steps recibidos.
        """

        def search_json_object(json_objects, xpath, frame):
            object_in_json = False
            for key, value in json_objects.items():
                if value["ValueToFind"] == xpath and value["Frame"] == frame:
                    object_in_json = True
                    break
            return object_in_json

        json_objects = {}
        for step in self.steps_data:
            if not step["event"] in ["open browser", "url log", "screenshot"]:
                if not search_json_object(json_objects, step["target"]["XPATH"], step["target"]["FRAME"]):
                    json_objects.update(self.build_object(step["target"]["TAGNAME"],
                                                            step["target"]["XPATH"],
                                                            step["target"]["FRAME"]))
                if step["target"]["FRAME"] != 'ROOT':
                    if not search_json_object(json_objects, step["target"]["FRAME"], "ROOT"):
                        json_objects.update(self.build_object("<iframe>",
                                                                  step["target"]["FRAME"],
                                                                  "ROOT"))
        return json_objects




    def get_name_object(self, xpath_object: str, json_objects: dict):
        """
            Args:
                xpath_object (str): xpath del objeto objetivo.
                json_objects (dict): Repositorio de objetos.

            Returns:
                Nombre de un objeto obtenido a patir de la lista de objetos.
        """
        for key, value in json_objects.items():
            if value["ValueToFind"] == xpath_object:
                return key

    @staticmethod
    def build_object(tag_name, xpath, frame):
        """
            Args:
                tag_name (str): tag name del objeto.
                xpath (str): xpath del objeto objetivo.
                frame (str): xpath del frame contenedor del objeto objetivo.

            Returns:
                un objeto json con formato pybot.".
        """
        object_element = {}
        object_name = f"{tag_name}_{random.randint(1, 5000)}"  # mejorar esto
        object_element[object_name] = {
            "GetFieldBy": "Xpath",
            "ValueToFind": f"{xpath}",
            "Frame": f"{frame}"
        }
        return object_element

if __name__ == "__main__":
    my_json =   [
                  {
                    "event": "url log",
                    "target": "https://www.google.com/",
                    "value": "https://www.google.com/",
                    "frame": None,
                    "order": 1
                  },
                  {
                    "event": "click",
                    "target": {
                      "TAGNAME": "<button>",
                      "XPATH": "//button[contains(text(),\"NO, GRACIAS\")]",
                      "FRAME": "//iframe[@name=\"callout\"]",
                      "QUALITY": 2
                    },
                    "screenshot" : "",

                    "value": None,
                    "frame": "//iframe[@name=\"callout\"]",
                    "order": 2
                  },
                  {
                    "event": "click",
                    "target": {
                      "TAGNAME": "<textarea>",
                      "XPATH": "//textarea[@id=\"APjFqb\"]",
                      "FRAME": "ROOT",
                      "QUALITY": 3
                    },
                    "value": None,
                    "frame": "ROOT",
                    "order": 3
                  },
                  {
                    "event": "input",
                    "target": {
                      "TAGNAME": "<textarea>",
                      "XPATH": "//textarea[@id=\"APjFqb\"]",
                      "FRAME": "ROOT",
                      "QUALITY": 3
                    },
                    "value": "testing",
                    "frame": "ROOT",
                    "order": 4
                  },
                  {
                    "event": "click",
                    "target": {
                      "TAGNAME": "<input>",
                      "XPATH": "//div[@class=\"FPdoLc lJ9FBc\"]//input[@name=\"btnK\"]",
                      "FRAME": "ROOT",
                      "QUALITY": 1
                    },
                    "value": None,
                    "frame": "ROOT",
                    "order": 5
                  }
                ]
    ScriptToFile(my_json).main()