{ "version": 3, "file": "py/std/temper_std/regex.py", "sources": [ "std/regex.temper.md" ], "sourcesContent": [ "# Regex Data Model and Functionality\n\nThe structural data model for regex patterns enables direct construction, and\nthe Temper regex dialect compiles static regex text patterns to these objects.\n\nA focus here is on providing tools people can actually reach for when they need\nto do text processing. The execution should be faster on backends like Python\nthan writing raw code, and the implementation in backends like C should\napproximate what you'd like to have written manually.\n\nDue to inadequate and distinct Unicode handling in backend regex engines, the\ninitial feature set avoids character classes and properties but is still aware\nof code points. Parsing focused on limited sets of delimiters works best for\nnow.\n\nThe core feature set here focuses on both the data model and utility functions,\nsuch as matching regexes against strings.\n\n## Regex Data Model\n\nAll regexes are composed hierarchically of `Regex` nodes. Regexes are a\nsequence of component parts. For example, `/hi./` is a sequence of\n[CodePoint](#codepoint) `/h/` and `/i/` and dot `/./`.\n\nAnd perhaps the most fundamental `Regex` is the [Sequence](#sequence),\nbecause it enables multiple regex components to be strung together.\n\n```\nexport /*sealed*/ interface Regex {\n```\n\nBefore a regex is used, it must be compiled. Some helper functions compile on\nthe fly, although it is faster to reuse a pre-compiled regex.\n\n```\n  // TODO(tjp, regex): Make this into a macro behind the scenes.\n  // TODO(tjp, regex): `compiled\u003cT\u003e(): CompiledRegex\u003cT\u003e`\n  public compiled(): CompiledRegex { new CompiledRegex(this) }\n```\n\nThe simplest use of a regular expression is if it is found in a string.\nRepeatedly calling these methods on a single `Regex` instance is inefficient.\nBetter for reuse is to compile in advance.\n\n```\n  public found(text: String): Boolean { compiled().found(text) }\n```\n\nYou can also return match details or perform text replacement. The returned\ngroups map contains an entry for each key in the order defined in the regex\npattern. If no \u0022full\u0022 group is defined, one is added automatically to capture\nthe full matched text.\n\nIn the future, we intend to support customized match types with fields to match\ncapture groups, statically checked where possible.\n\n```\n  // TODO(tjp, regex): Also macro because reification.\n\n  public find(text: String): Map\u003cString, Group\u003e | Bubble {\n    compiled().find(text)\n  }\n\n  public replace(\n    text: String, format: fn (Map\u003cString, Group\u003e): String\n  ): String {\n    compiled().replace(text, format)\n  }\n```\n\nThat's it for what you can do with regex patterns in Temper today, but there's\nmuch more to say on what kinds of regexes can be built.\n\n```\n}\n```\n\n## Regex Item Types\n\nA `Regex` is composed of a potential variety of subtypes.\n\n### Groups\n\nMultiple types of groups exist:\n\n- [Capture](#capture) `/(?\u003cname\u003e...)/` to remember match groups for later use.\n- Non-capturing group syntax `/(?:...)/`, which is simply a [Regex](#regex)\n  instance in the data model.\n\n### Capture\n\nTODO(tjp, regex): Change to named captures only!\n\n`Capture` is a [group](#groups) that remembers the matched text for later\naccess. Temper supports only named matches, with current intended syntax\n`/(?name = ...)/`.\n\n```\nexport class Capture extends Regex {\n  public name: String;\n  public /*early*/ item: Regex;\n}\n```\n\n### CodePart\n\nA component of a [CodeSet][#codeset], aka character class, which applies to a\nsubset of regex data types.\n\nHere, \u0022code\u0022 is short for \u0022code point\u0022 although \u0022char\u0022 might work better,\ndepending on expectations.\n\n```\nexport /*sealed*/ interface CodePart extends Regex {}\n```\n\n### CodePoints\n\nOne or more verbatim code points, where the sequence matters if within a\n[Regex](#regex) or not if within a [CodeSet](#codeset). Some escapes in\ntextual regex source, such as `/\\t/`, can be stored as raw code points.\n\nThe `String` here can enable more efficient storage than individual code\npoints, although the source text may require non-capture grouping. For example,\n`/(?:abc)?/` optionally matches the string `\u0022abc\u0022`, whereas `/abc?/` matches\n`\u0022ab\u0022` with an optional `\u0022c\u0022`.\n\n```\nexport class CodePoints extends CodePart {\n  public value: String;\n}\n```\n\n### Specials\n\nA number of special match forms exist. In the data model, these are empty\nclasses.\n\n- `.` - `Dot` In default mode, matches any Unicode code point except newline.\n- `^` - `Begin` in default mode matches zero-length at the beginning of a\n  string.\n- `\u0024` - `End` in default mode matches zero-length at the end of a string.\n- `\\b` - `WordBoundary` matches zero-length at the boundary between word and\n  non-word code points. More sophisticated Unicode compliance is TBD.\n- `\\s` (negated as `\\S`) - `Space` matches any horizontal space code point.\n  Details are TBD.\n- `\\w` (negated as `\\W`) - `Word` matches any word code point. Details are TBD.\n  This is currently defined in terms of old ASCII definitions because those are\n  clear. Perhaps this will stay that way, and Unicode properties like `\\p{L}`\n  will be used for human language needs.\n- `\\X` - `GraphemeCluster` might not be supported, but [here is some discussion\n  of how to implement it](\n  https://github.com/rust-lang/regex/issues/54#issuecomment-661905060).\n\n\u003cdetails\u003e\n\n```\nexport /*sealed*/ interface Special extends Regex {}\nexport let Begin: Special = do { class Begin extends Special {}; new Begin() };\nexport let Dot: Special = do { class Dot extends Special {}; new Dot() };\nexport let End: Special = do { class End extends Special {}; new End() };\n// TODO(tjp, regex): We can't easily support this at present across backends.\n// export let GraphemeCluster = do {\n//   class GraphemeCluster extends Special {}; new GraphemeCluster()\n// };\nexport let WordBoundary: Special = do {\n  class WordBoundary extends Special {}; new WordBoundary()\n};\n\nexport /*sealed*/ interface SpecialSet extends CodePart \u0026 Special {}\nexport let Digit: SpecialSet = do {\n  class Digit extends SpecialSet {}; new Digit()\n};\nexport let Space: SpecialSet = do {\n  class Space extends SpecialSet {}; new Space()\n};\nexport let Word: SpecialSet = do {\n  class Word extends SpecialSet {}; new Word()\n};\n```\n\n\u003c/details\u003e\n\n### CodeRange\n\nA code point range matches any code point in its inclusive bounds, such as\n`/[a-c]/`. In source, `-` is included in a code set either by escaping or by\nincluding it as the first or last character. A `CodeRange` is usually contained\ninside a [CodeSet](#codeset), and syntactically always is.\n\n```\nexport class CodeRange extends CodePart {\n  public min: Int;\n  public max: Int;\n}\n```\n\n### CodeSet\n\nA set of code points, any of which can match, such as `/[abc]/` matching any of\n`\u0022a\u0022`, `\u0022b\u0022`, or `\u0022c\u0022`. Alternatively, a negated set is the inverse of the code\npoints given, such as `/[^abc]/`, matching any code point that's not any of\nthese. This is also often called a character class.\n\nFurther, a subset of [specials](#specials) can also be used in code sets. A\nnegated code set of just a special set often has custom syntax. For example,\nnon-space can be said as either `/[^\\s]/` or `/\\S/`.\n\n```\nexport class CodeSet extends Regex {\n  public items: List\u003cCodePart\u003e;\n  public negated: Boolean = false;\n}\n```\n\n### Or\n\n`Or` matches any one of multiple options, such as `/ab|cd|e*/`.\n\n```\nexport class Or extends Regex {\n  public /*early*/ items: List\u003cRegex\u003e;\n}\n```\n\n### Repeat\n\n`Repeat` matches from an minimum to a maximum number of repeats of a\nsubregex. This can be represented in regex source in a number of ways:\n\n- `?` matches 0 or 1.\n- `*` matches 0 or more.\n- `+` matches 1 or more.\n- `{m}` matches exactly `m` repetitions.\n- `{m,n}` matches between `m` and `n`. Missing `n` is a max of infinity. For\n  example, `{0,1}` is equivalent to `?`, and `{1,}` is equivalent to `+`.\n\nBy default, repetitions are greedy, matching as many repetitions as possible.\nIn regex source, any of the above can have `?` appended to indicated reluctant\n(aka non-greedy), matching as few repetitions as possible.\n\n```\nexport class Repeat extends Regex {\n  public /*early*/ item: Regex;\n  public min: Int;\n  public max: Int | Null; // where null means infinite\n  public reluctant: Boolean = false;\n}\n```\n\nWe also have convenience builders.\n\n```\nexport let entire(item: Regex): Regex {\n  new Sequence([Begin, item, End])\n}\n\nexport let oneOrMore(item: Regex, reluctant: Boolean = false): Repeat {\n  { item, min: 1, max: null, reluctant }\n}\n\nexport let optional(item: Regex, reluctant: Boolean = false): Repeat {\n  { item, min: 0, max: 1, reluctant }\n}\n```\n\n### Sequence\n\n`Sequence` strings along multiple other regexes in order.\n\n```\nexport class Sequence extends Regex {\n  public /*early*/ items: List\u003cRegex\u003e;\n}\n```\n\n## Match Objects\n\nFor detailed match results, call `find` on a regex to get a `Map` object from\n`String` keys to `Group` values.\n\n```\n// TODO Go back to a `Match` object with `groups` as a member so we can also\n// TODO easily return metadata alongside groups? Or is simpler better?\n// export class Match { // interface ... \u003cT = Map\u003cString, Group\u003e\u003e {\n//   public let groups: Map\u003cString, Group\u003e;\n// }\n\nexport class Group {\n  public let name: String;\n  public let value: String;\n  public let codePointsBegin: Int;\n}\n```\n\n## Compiled Regex Objects\n\nThe compiled form of a regex is mostly opaque, but it can be cached for more\nefficient reuse than working from a source [Regex](#regex-data-model).\n\n\u003cdetails\u003e\n\n```\n// Provides a workaround for access to std/regex from extension methods.\nclass RegexRefs {\n  public let codePoints: CodePoints = new CodePoints(\u0022\u0022);\n  public let group: Group = { name: \u0022\u0022, value: \u0022\u0022, codePointsBegin: 0 }\n  public let orObject: Or = new Or([]);\n}\n\nlet regexRefs = new RegexRefs();\n```\n\n\u003c/details\u003e\n\n```\n// TODO(tjp, regex): Generate subtypes of this interface later.\nexport class CompiledRegex { // interface ... \u003cT\u003e {\n```\n\nThe source `Regex` data is still available on compiled objects in case it's\nneeded for composition or other purposes.\n\n```\n  public let data: Regex;\n\n  public constructor(data: Regex) {\n    this.data = data;\n    compiled = compileFormatted(format());\n  }\n```\n\nA compiled regex exposes many of the same capabilities as `Regex`, but they are\nmore efficient to use repeatedly.\n\n```\n  public found(text: String): Boolean { compiledFound(compiled, text) }\n\n  public find(text: String): Map\u003cString, Group\u003e | Bubble {\n    compiledFind(compiled, text, regexRefs)\n  }\n\n  public replace(\n    text: String, format: fn (Map\u003cString, Group\u003e): String\n  ): String {\n    compiledReplace(compiled, text, format, regexRefs)\n  }\n```\n\nTODO(tjp, regex): Public method for replace with named references.\nTODO(tjp, regex): Any static checking?\n\n\u003cdetails\u003e\n\n```\n  let compiled: AnyValue;\n\n  // Extension functions on some backends need the private `compiled` value\n  // passed in directly.\n  @connected(\u0022CompiledRegex::compiledFound\u0022)\n  compiledFound(compiled: AnyValue, text: String): Boolean;\n\n  @connected(\u0022CompiledRegex::compiledFind\u0022)\n  compiledFind(\n    compiled: AnyValue, text: String, regexRefs: RegexRefs\n  ): Map\u003cString, Group\u003e | Bubble;\n\n  @connected(\u0022CompiledRegex::compileFormatted\u0022)\n  compileFormatted(formatted: String): AnyValue;\n\n  @connected(\u0022CompiledRegex::compiledReplace\u0022)\n  compiledReplace(\n    compiled: AnyValue,\n    text: String,\n    format: fn (Map\u003cString, Group\u003e): String,\n    regexRefs: RegexRefs,\n  ): String;\n\n  @connected(\u0022CompiledRegex::format\u0022)\n  format(): String { new RegexFormatter().format(data) }\n```\n\n\u003c/details\u003e\n\n```\n}\n```\n\n## Private implementation matters\n\nSome regex logic can be shared across backends. These features aren't directly\nexported to the user, however.\n\nThe intent is that these support features only get included in compiled Temper\ncode if usage depends on dynamically constructed regexes. If all regex building\nis done as stable values, we hope to generated backend compiled regexes purely\nat Temper compile time.\n\n### RegexFormatter\n\n\u003cdetails\u003e\n\n```\nclass RegexFormatter {\n  let out: ListBuilder\u003cString\u003e = new ListBuilder\u003cString\u003e();\n\n  public format(regex: Regex): String {\n    pushRegex(regex)\n    out.join(\u0022\u0022) { (x);; x }\n  }\n\n  pushRegex(regex: Regex): Void {\n    match (regex) {\n      // Aggregate types.\n      is Capture -\u003e pushCapture(regex);\n      is CodePoints -\u003e pushCodePoints(regex, false);\n      is CodeRange -\u003e pushCodeRange(regex);\n      is CodeSet -\u003e pushCodeSet(regex);\n      is Or -\u003e pushOr(regex);\n      is Repeat -\u003e pushRepeat(regex);\n      is Sequence -\u003e pushSequence(regex);\n      // Specials.\n      // Some of these will need to be customized on future backends.\n      Begin -\u003e out.add(\u0022^\u0022);\n      Dot -\u003e out.add(\u0022.\u0022);\n      End -\u003e out.add(\u0022\u0024\u0022);\n      WordBoundary -\u003e out.add(\u0022\\\\b\u0022);\n      // Special sets.\n      Digit -\u003e out.add(\u0022\\\\d\u0022);\n      Space -\u003e out.add(\u0022\\\\s\u0022);\n      Word -\u003e out.add(\u0022\\\\w\u0022);\n      // ...\n    }\n  }\n\n  pushCapture(capture: Capture): Void {\n    out.add(\u0022(\u0022);\n    // TODO(tjp, regex): Consistent name validation rules for all backends???\n    // TODO(tjp, regex): Validate here or in `Capture` constructor???\n    // TODO(tjp, regex): Validate here or where against reused names???\n    pushCaptureName(out, capture.name);\n    pushRegex(capture.item);\n    out.add(\u0022)\u0022);\n  }\n\n  @connected(\u0022RegexFormatter::pushCaptureName\u0022)\n  pushCaptureName(out: ListBuilder\u003cString\u003e, name: String): Void {\n    // All so far except Python use this form.\n    out.add(\u0022?\u003c\u0024{name}\u003e\u0022);\n  }\n\n  pushCode(code: Int, insideCodeSet: Boolean): Void {\n    // Expose private property to extension.\n    pushCodeTo(out, code, insideCodeSet);\n    // TODO(tjp, regex): Implement more in Temper once we can.\n    // if (escapeCodes[code] \u0026\u0026 false) {\n    //   out.add(\u0022\\\\\u0022);\n    //   // TODO(tjp, regex): How to convert back to strings?\n    // }\n  }\n\n  @connected(\u0022RegexFormatter::pushCodeTo\u0022)\n  pushCodeTo(out: ListBuilder\u003cString\u003e, code: Int, insideCodeSet: Boolean): Void;\n\n  pushCodePoints(codePoints: CodePoints, insideCodeSet: Boolean): Void {\n    for (\n      var slice = codePoints.value.codePoints;\n      !slice.isEmpty;\n      slice = slice.advance(1)\n    ) {\n      pushCode(slice.read(), insideCodeSet);\n    }\n  }\n\n  pushCodeRange(codeRange: CodeRange): Void {\n    out.add(\u0022[\u0022);\n    pushCodeRangeUnwrapped(codeRange);\n    out.add(\u0022]\u0022);\n  }\n\n  pushCodeRangeUnwrapped(codeRange: CodeRange): Void {\n    pushCode(codeRange.min, true);\n    out.add(\u0022-\u0022);\n    pushCode(codeRange.max, true);\n  }\n\n  pushCodeSet(codeSet: CodeSet): Void {\n    let adjusted = adjustCodeSet(codeSet, regexRefs);\n    match (adjusted) {\n      is CodeSet -\u003e do {\n        out.add(\u0022[\u0022);\n        if (adjusted.negated) {\n          out.add(\u0022^\u0022);\n        }\n        for (var i = 0; i \u003c adjusted.items.length; i += 1) {\n          pushCodeSetItem(adjusted.items[i]);\n        }\n        out.add(\u0022]\u0022);\n      }\n      else -\u003e pushRegex(adjusted);\n    }\n  }\n\n  @connected(\u0022RegexFormatter::adjustCodeSet\u0022)\n  adjustCodeSet(codeSet: CodeSet, regexRefs: RegexRefs): Regex { codeSet }\n\n  pushCodeSetItem(codePart: CodePart): Void {\n    match (codePart) {\n      is CodePoints -\u003e pushCodePoints(codePart, true);\n      is CodeRange -\u003e pushCodeRangeUnwrapped(codePart);\n      is SpecialSet -\u003e pushRegex(codePart);\n    }\n  }\n\n  pushOr(or: Or): Void {\n    if (!or.items.isEmpty) {\n      out.add(\u0022(?:\u0022);\n      // TODO(tjp, regex): See #822. Until `this` works better, no this in funs.\n      // TODO(tjp, regex): So just manually loop here. Sometimes faster, anyway?\n      pushRegex(or.items[0]);\n      for (var i = 1; i \u003c or.items.length; i += 1) {\n        out.add(\u0022|\u0022);\n        pushRegex(or.items[i]);\n      }\n      out.add(\u0022)\u0022);\n    }\n  }\n\n  pushRepeat(repeat: Repeat): Void {\n    // Always wrap the main sub-pattern here to make life easy\n    out.add(\u0022(?:\u0022);\n    pushRegex(repeat.item);\n    out.add(\u0022)\u0022);\n    // Then add the repetition part.\n    let min = repeat.min;\n    let max = repeat.max;\n    if (false) {\n    } else if (min == 0 \u0026\u0026 max == 1) {\n      out.add(\u0022?\u0022);\n    } else if (min == 0 \u0026\u0026 max == null) {\n      out.add(\u0022*\u0022);\n    } else if (min == 1 \u0026\u0026 max == null) {\n      out.add(\u0022+\u0022);\n    } else {\n      out.add(\u0022{\u0024{min.toString()}\u0022);\n      if (min != max) {\n        out.add(\u0022,\u0022);\n        if (max != null) {\n          out.add(max.as\u003cInt\u003e().toString());\n        }\n      }\n      out.add(\u0022}\u0022);\n    }\n    if (repeat.reluctant) {\n      out.add(\u0022?\u0022);\n    }\n  }\n\n  pushSequence(sequence: Sequence): Void {\n    // TODO(tjp, regex): Foreach loop/function would be nice.\n    for (var i = 0; i \u003c sequence.items.length; i += 1) {\n      pushRegex(sequence.items[i]);\n    }\n  }\n\n  // Put this here instead of the data model for now because I'm not sure this\n  // makes sense to be part of the public api right now.\n  public maxCode(codePart: CodePart): Int | Null {\n    match (codePart) {\n      is CodePoints -\u003e do {\n        // Iterating code points is the hardest of the current cases.\n        let value = codePart.value;\n        if (value.isEmpty) {\n          null\n        } else {\n          // My kingdom for a fold, or even just a max, in builtins.\n          var max = 0;\n          for (\n            var slice = value.codePoints;\n            !slice.isEmpty;\n            slice = slice.advance(1)\n          ) {\n            let next = slice.read();\n            if (next \u003e max) {\n              max = next;\n            }\n          }\n          max\n        }\n      }\n      // Others below are easy for now.\n      is CodeRange -\u003e codePart.max;\n      Digit -\u003e \u00229\u0022.codePoints.read();\n      Space -\u003e \u0022 \u0022.codePoints.read();\n      Word -\u003e \u0022z\u0022.codePoints.read();\n      // Actually unexpected, ever, but eh.\n      else -\u003e null;\n    }\n  }\n}\n```\n\n\u003c/details\u003e\n" ], "names": [ "ABCMeta", "str", "bool", "int", "Exception", "RuntimeError", "len", "len#1254", "list", "list#1271", "MappingProxyType", "Callable", "Sequence", "Optional", "Union", "Any", "MutableSequence", "cast_by_type", "Label", "isinstance_int", "cast_by_test", "list_join", "list_join#1242", "generic_eq", "generic_eq#1245", "list_builder_add", "list_builder_add#1246", "string_code_points", "string_code_points#1249", "list_get", "list_get#1255", "str_cat", "str_cat#1265", "int_to_string", "int_to_string#1266", "compiled_regex_compile_formatted", "compiled_regex_compile_formatted#1238", "compiled_regex_compiled_found", "compiled_regex_compiled_found#1239", "compiled_regex_compiled_find", "compiled_regex_compiled_find#1240", "compiled_regex_compiled_replace", "compiled_regex_compiled_replace#1241", "regex_formatter_push_capture_name", "regex_formatter_push_capture_name#1247", "regex_formatter_push_code_to", "regex_formatter_push_code_to#1248", "Regex", "this", "CompiledRegex", "text", "format", "Capture", "name", "item", "constructor", "CodePart", "CodePoints", "value", "Special", "SpecialSet", "CodeRange", "min", "max", "CodeSet", "items", "negated", "Or", "Repeat", "reluctant", "Group", "codePointsBegin", "RegexRefs", "codePoints", "group", "orObject", "t#1206", "t#1208", "t#1210", "data", "compiled", "t#1080", "t#1081", "regexRefs", "RegexFormatter", "out", "regex", "t#1175", "fn", "x", "pushRegex", "t#764", "t#765", "t#768", "t#769", "t#772", "t#773", "t#776", "t#777", "t#780", "t#781", "t#784", "t#785", "t#788", "t#789", "s__1243#1244", "Begin", "Dot", "End", "WordBoundary", "Digit", "Space", "Word", "pushCapture", "capture", "t#759", "t#1159", "t#1160", "pushCode", "code", "insideCodeSet", "pushCodePoints", "t#1148", "t#1149", "t#1153", "slice", "pushCodeRange", "codeRange", "pushCodeRangeUnwrapped", "t#1141", "t#1143", "pushCodeSet", "codeSet", "t#1137", "t#737", "t#738", "t#743", "adjusted", "s__1250#1252", "s__1251#1253", "i", "adjustCodeSet", "pushCodeSetItem", "codePart", "t#724", "t#725", "t#728", "t#729", "t#732", "t#733", "s__1256#1257", "pushOr", "or", "t#1121", "t#716", "t#721", "s__1258#1260", "s__1259#1262", "pushRepeat", "repeat", "t#1111", "t#703", "t#704", "t#705", "t#708", "t#710", "s__1263#1264", "pushSequence", "sequence", "t#1109", "t#697", "s__1267#1268", "return", "t#1087", "t#1089", "t#1094", "t#1097", "t#1100", "t#1103", "t#670", "t#671", "t#683", "t#684", "s__1269#1270", "next", "t#1083", "entire", "oneOrMore", "optional" ], "mappings": "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" }