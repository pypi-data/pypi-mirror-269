# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .embeddings_model_provider import EmbeddingsModelProvider

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AppModelsRequestDatasource(pydantic.BaseModel):
    name: str
    description: typing.Optional[str] = None
    type: str
    content: typing.Optional[str] = None
    url: typing.Optional[str] = None
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    vector_db_id: typing.Optional[str] = pydantic.Field(alias="vectorDbId", default=None)
    embeddings_model_provider: typing.Optional[EmbeddingsModelProvider] = pydantic.Field(
        alias="embeddingsModelProvider", default=None
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
