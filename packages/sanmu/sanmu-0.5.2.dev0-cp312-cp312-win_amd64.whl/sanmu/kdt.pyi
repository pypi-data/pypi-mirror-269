import httpx
from _typeshed import Incomplete
from sanmu import settings as settings
from sanmu.kdt_utils import BaseKeyWord as BaseKeyWord, MockRequest as MockRequest, MyActionChains as MyActionChains
from sanmu.settings import DriverEnum as DriverEnum, HttpUrl as HttpUrl, NotSetEnum as NotSetEnum
from typing import Union

logger: Incomplete

class WebKeyWord(BaseKeyWord):
    def key_debugger(self, *args, **kwargs) -> None: ...
    def key_shell(self, scrip, scrip_args, *args, **kwargs): ...
    driver: Incomplete
    wait: Incomplete
    def key_new_driver(self, browser: Union[str, DriverEnum] = ..., hub: Union[str, HttpUrl, NotSetEnum] = ..., capabilities: str = '', *args, **kwargs): ...
    def key_goto(self, url: str, *args, **kwargs): ...
    def key_touch(self, locator, *args, **kwargs) -> None: ...
    def key_click(self, locator, force=..., *args, **kwargs): ...
    def key_input(self, locator, content, clear: bool = True, *args, **kwargs): ...
    def key_chosen(self, locator, value, *args, **kwargs): ...
    def key_sleep(self, times: Union[str, float], *args, **kwargs): ...
    def key_show(self, locator, *args, **kwargs) -> None: ...
    def key_move(self, locator, x: int = 0, y: int = 0, *args, **kwargs) -> None: ...
    def key_frame_enter(self, locator, *args, **kwargs) -> None: ...
    def key_frame_exit(self, *args, **kwargs) -> None: ...
    def key_frame_top(self, *args, **kwargs) -> None: ...
    def key_alert_ok(self, text: Incomplete | None = None, *args, **kwargs) -> None: ...
    def key_alert_cancel(self, *args, **kwargs) -> None: ...
    def key_save(self, var_name, value, *args, **kwargs) -> None: ...
    def key_save_text(self, locator, var_name, allow_empty: bool = True, *args, **kwargs): ...
    def key_save_attr(self, locator, var_name, attr_name, *args, **kwargs) -> None: ...
    def key_save_title(self, var_name, *args, **kwargs) -> None: ...
    def key_save_url(self, var_name, *args, **kwargs) -> None: ...

class AppKeyWord(BaseKeyWord):
    def key_activity(self, activity_name, package_name: Incomplete | None = None, *args, **kwargs) -> None: ...
    def key_context(self, context_name: str = 'NATIVE_APP', *args, **kwargs) -> None: ...
    def key_press(self, locator, times: float = 1.0, *args, **kwargs) -> None: ...
    def key_swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, times: float = 0.1, *args, **kwargs): ...
    def key_ac_new(self, *args, **kwargs) -> None: ...
    def key_ac_perform(self, *args, **kwargs) -> None: ...
    def key_ac_new_click(self, locator, times: float = 0.1, *args, **kwargs) -> None: ...
    def key_ac_new_swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, times: float = 0.1, *args, **kwargs): ...
    def key_ac_touch_down(self, x, y, *args, **kwargs) -> None: ...
    def key_ac_ele_down(self, locator, *args, **kwargs) -> None: ...
    def key_ac_touch_move(self, x, y, *args, **kwargs) -> None: ...
    def key_ac_ele_move(self, locator, *args, **kwargs) -> None: ...
    def key_ac_touch_up(self, *args, **kwargs) -> None: ...
    def key_ac_ele_up(self, *args, **kwargs): ...
    def key_shake(self, *args, **kwargs) -> None: ...

class ApiKeyWord(BaseKeyWord):
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def log_request(request: httpx.Request, *args, **kwargs): ...
    @staticmethod
    def log_response(response: httpx.Response, *args, **kwargs): ...
    @property
    def current_request(self) -> MockRequest: ...
    @property
    def current_response(self) -> httpx.Response: ...
    client: Incomplete
    def key_new_client(self, timeout: float = 5.0, *args, **kwargs) -> None: ...
    def key_set_baseurl(self, url, *args, **kwargs) -> None: ...
    def key_set_follow_redirects(self, follow: bool = False, *args, **kwargs) -> None: ...
    def key_set_headers(self, headers, *args, **kwargs) -> None: ...
    def key_set_cookies(self, cookies, *args, **kwargs) -> None: ...
    def key_set_params(self, params, *args, **kwargs) -> None: ...
    def key_set_json(self, _json, *args, **kwargs) -> None: ...
    def key_set_form(self, from_dict, *args, **kwargs) -> None: ...
    def key_add_header(self, key, value, *args, **kwargs) -> None: ...
    def key_add_cookie(self, key, value, *args, **kwargs) -> None: ...
    def key_add_query(self, key, value, *args, **kwargs) -> None: ...
    def key_add_form(self, key, value, *args, **kwargs) -> None: ...
    def key_add_file(self, key, value, *args, **kwargs) -> None: ...
    def key_send_http(self, method, url, *args, **kwargs) -> None: ...
    def key_save_code(self, var_name, *args, **kwargs) -> None: ...
    def key_save_headers(self, var_name, *args, **kwargs) -> None: ...
    def key_save_body(self, var_name, *args, **kwargs) -> None: ...
    def key_save_jsonpath(self, var_name, value, *args, **kwargs) -> None: ...

class KeyWord(WebKeyWord, AppKeyWord, ApiKeyWord): ...

def get_class_by_type(kw_type: str = 'all') -> None: ...
