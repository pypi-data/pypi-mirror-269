import abc
from _typeshed import Incomplete
from appium.webdriver import WebElement as RemoteWebElement
from httpx import Client as Client
from sanmu import settings as settings
from sanmu.exchange import Exchange as Exchange
from selenium.webdriver import ActionChains
from selenium.webdriver.common.actions.pointer_actions import PointerActions
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.support.wait import WebDriverWait
from typing import Any

logger: Incomplete

class SanmuLocator:
    def __init__(self, locator_str) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value: str): ...
    @property
    def by(self): ...
    @by.setter
    def by(self, value: str): ...
    @property
    def index(self): ...
    @index.setter
    def index(self, index: str): ...

class MyActionChains(ActionChains):
    pointer_count: int
    def new_pointer(self) -> PointerActions: ...
    def click_by_new_pointer(self, element, pause_time: float = 0.1): ...
    def touch_by_new_pointer(self, start_x: int, start_y: int, end_x: int, end_y: int, pause_time: float = 0.1): ...

class BaseKeyWord(metaclass=abc.ABCMeta):
    driver: WebDriver
    client: Client
    wait: WebDriverWait
    exchanger: Incomplete
    usefixtures: Incomplete
    def __init__(self, exchanger: Exchange, usefixtures: dict[str, object]) -> None: ...
    def __getattr__(self, attr: str): ...
    @classmethod
    def print_key_doc(cls) -> None: ...
    @classmethod
    def all_keyword(cls) -> tuple: ...
    def find_element(self, locator: str) -> RemoteWebElement: ...
    def can_interactive(self, ele: RemoteWebElement): ...
    def set_vars(self, var_name, value) -> None: ...
    def key_set_driver(self, fixture_name) -> None: ...
    def key_assert(self, value: Any, assert_name: str, actual_value: Any = '', *args, **kwarg): ...

class Validator:
    ele: Incomplete
    parent: Incomplete
    webdriver: Incomplete
    value: Incomplete
    verify_name: Incomplete
    actual_value: Incomplete
    def __init__(self, parent: BaseKeyWord, value, assert_name, actual_value) -> None: ...
    def assert_in(self, a, b) -> None: ...
    def assert_contains(self, a, b) -> None: ...
    def assert_equal(self, a, b) -> None: ...
    def assert_re(self, a, b) -> None: ...
    def assert_scheme(self, a, b) -> None: ...

class MockRequest:
    headers: Incomplete
    cookies: Incomplete
    params: Incomplete
    data: Incomplete
    json: Incomplete
    files: Incomplete
    def __init__(self) -> None: ...
    def to_dict(self): ...
