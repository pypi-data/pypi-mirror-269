import pytest
from _typeshed import Incomplete as Incomplete
from collections.abc import Generator
from pytest_xlsx import models as models
from typing import Iterable

logger: Incomplete

class XlsxFile(pytest.Module):
    obj: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def collect(self) -> Generator[Incomplete, None, None]: ...

class XlsxSheet(pytest.Class):
    xlsx_data: models.Suite
    @classmethod
    def from_parent(cls, parent, *, name, obj: Incomplete | None = None, **kw): ...
    def collect(self) -> Iterable[pytest.Item | pytest.Collector]: ...

class XlsxItem(pytest.Function):
    xlsx_data: models.Case
    max_step_no: int
    current_step_no: int
    current_step: dict
    usefixtures: dict
    def __init__(self, *args, own_markers: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def is_first_step(self) -> None: ...
    @property
    def is_last_step(self) -> None: ...
    @property
    def location(self) -> None: ...
    @classmethod
    def from_parent(cls, parent, name, case, marks, **kw) -> None: ...
    @classmethod
    def from_parent_parametrize(cls, parent, name, case: models.Case, marks, parametrize_marks): ...
    def runtest(self) -> None: ...
    def repr_failure(self, excinfo) -> None: ...
