from __future__ import annotations

from dataclasses import dataclass
from enum import Enum
from itertools import product
from typing import Literal, Optional, Union
from typing_extensions import TypeGuard
from gena.custom_fields import DataClassField
from peewee import (
    CharField,
    ForeignKeyField,
    TextField,
)
from osin.models.base import BaseModel
from osin.models.exp import Exp, ExpRun
from sm.misc.funcs import assert_not_null

EXPNAME_INDEX_FIELD = "__exp__"
EXPNAME_INDEX_FIELD_TYPE = Literal["__exp__"]


@dataclass
class Index:
    index: tuple[str, ...]
    # list of values to show in the report, None to show all
    values: Optional[list[Union[str, int, bool, None]]] = None
    property: Literal["params", "aggregated_primitive_outputs"] = "params"

    @staticmethod
    def from_tuple(obj: tuple):
        return Index(obj[0], obj[1], obj[2])

    def is_expname_index(self):
        return len(self.index) == 1 and self.index[0] == EXPNAME_INDEX_FIELD

    def get_value(self, run: ExpRun) -> Union[str, int, bool, None]:
        if self.is_expname_index():
            return run.exp.name

        prop = getattr(run, self.property)
        for i in range(len(self.index) - 1):
            prop = prop[self.index[i]]
        return prop[self.index[-1]]

    def has_values(self):
        return self.values is not None


@dataclass
class ExpIndex:
    # list of indexes, the index which value is found in the run is used.
    indices: Union[dict[int, Index], dict[int, EXPNAME_INDEX_FIELD_TYPE]]

    def get_value(self, run: ExpRun) -> Union[str, int, bool, None]:
        idx = self.indices[run.exp_id]
        if isinstance(idx, Index):
            return idx.get_value(run)
        return idx

    def has_values(self):
        return any(
            expidx.values is not None
            for expidx in self.indices.values()
            if isinstance(expidx, Index)
        )

    def iter_exp_values(self):
        if ExpIndex.is_nested_index(self.indices):
            return ((expid, expidx.values) for expid, expidx in self.indices.items())
        return self.indices.items()

    @staticmethod
    def from_tuple(obj: tuple):
        return ExpIndex(
            {expid: Index.from_tuple(index) for expid, index in obj[0].items()}
        )

    @staticmethod
    def is_nested_index(
        indices: Union[dict[int, Index], dict[int, EXPNAME_INDEX_FIELD_TYPE]]
    ) -> TypeGuard[dict[int, Index]]:
        return any(isinstance(idx, Index) for idx in indices.values())


@dataclass
class Axis:
    indices: list[Union[Index, ExpIndex]]

    def get_value(self, run: ExpRun) -> tuple:
        return tuple(idx.get_value(run) for idx in self.indices)

    def populate_values(self, runs: list[ExpRun]):
        """Populate the values of the axis"""
        for idx in self.indices:
            if not idx.has_values():
                if isinstance(idx, Index):
                    idx.values = list({idx.get_value(run) for run in runs})
                else:
                    expindices = idx.indices
                    if ExpIndex.is_nested_index(expindices):
                        expvalues = {expid: [] for expid in expindices}
                        for run in runs:
                            expidx = expindices[run.exp_id]
                            expvalues[run.exp_id].append(expidx.get_value(run))
                        for expid, expidx in idx.indices.items():
                            if isinstance(expidx, Index):
                                expidx.values = list(set(expvalues[expid]))
        return self

    def get_values(self) -> list[tuple]:
        """Get the items of the axis by generating combinations of values of each index.

        Generating the combinations is not longer a simple cross product because of ExpIndex.

        For example, take a look at the following axis:

        - __exp__
        - dataset
        - { crexp: params.cr_method, cgexp: params.cg_method, baseline: params.known_subj }

        Assuming dataset has 3 unique values, then (__exp__, dataset) has 9 combinations (there are 3 exps). (__exp__, dataset, { crexp... })
        will has: 3 * (|params.cr_method| + |params.cg_method| + ...) combinations. Anytime ExpIndex appears, __exp__ won't be included in the
        list of items.
        """
        output = {}
        exp_indices = [
            (i, idx) for i, idx in enumerate(self.indices) if isinstance(idx, ExpIndex)
        ]
        non_exp_indices = [
            (i, idx)
            for i, idx in enumerate(self.indices)
            if not isinstance(idx, ExpIndex)
        ]

        if len(exp_indices) == 0:
            return list(
                product(*[assert_not_null(idx.values) for i, idx in non_exp_indices])
            )

        expid2values = {expid: [] for expid in exp_indices[0][1].indices.keys()}
        for i, idx in exp_indices:
            for expid, expvalues in idx.iter_exp_values():
                expid2values[expid].append((i, expvalues))

        output = []
        for expid, expvalues in expid2values.items():
            iters = [None] * len(self.indices)
            for i, idx in non_exp_indices:
                iters[i] = idx.values
            for i, v in expvalues:
                iters[i] = v
            output.extend(product(*iters))
        return output

    @staticmethod
    def from_tuple(obj: tuple):
        return Axis(
            [
                ExpIndex.from_tuple(x) if len(x) == 1 else Index.from_tuple(x)
                for x in obj[0]
            ]
        )


@dataclass
class TableReportArgs:
    xaxis: Axis
    yaxis: Axis
    # although it has the same schema as axes, axes are multi-level indices
    # and going down each level implies an AND condition has been applied.
    # for values, it is must a collection of values to display
    zvalues: list[Union[Index, ExpIndex]]

    @staticmethod
    def from_tuple(obj: tuple):
        return TableReportArgs(
            Axis(obj[0]),
            Axis(obj[1]),
            [
                ExpIndex.from_tuple(x) if len(x) == 1 else Index.from_tuple(x)
                for x in obj[2]
            ],
        )


class ReportType(str, Enum):
    Table = "table"


@dataclass
class ReportArgs:
    type: ReportType
    value: TableReportArgs

    @staticmethod
    def from_tuple(obj: tuple):
        return ReportArgs(ReportType(obj[0]), TableReportArgs.from_tuple(obj[1]))


class Report(BaseModel):
    name = CharField()
    description = TextField()
    args: ReportArgs = DataClassField(ReportArgs, null=True)  # type: ignore


class ExpReport(BaseModel):
    exp = ForeignKeyField(Exp, backref="reports", on_delete="CASCADE")
    report = ForeignKeyField(Report, backref="exps", on_delete="CASCADE")
