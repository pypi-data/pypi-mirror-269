{"version":3,"sources":["molecular.tsx","App.tsx","index.tsx"],"names":["getHeight","width","Mol2DSelector","React","memo","props","mol","smiles","selection","nop_selection","onMol2DInstanceCreated","onSelectionChanged","domRef","useRef","selector","resize","highlightAtom","undefined","highlightBond","isMoving","ref","resizeObserverEntry","useResizeObserver","contentRect","hydrogenObj","getSelectedAtoms","useCallback","withHydrogen","_selector$current","current","model","mMol","selected","atom","getAllAtoms_0","_hydrogenObj$current$","isSelectedAtom_0","push","size","forEach","useEffect","clearTimeout","setTimeout","drawPane","setSize_0","window","OCL","StructureEditor","instance","setMolFile_0","setSmiles_0","toolBar","currentAction","shift_0","rectangular","mConnAtom","atoms","atomId","mAtomicNo","Set","add","removeExplicitHydrogens_0","cleanMolecule","setAtomHightlightCallback","setBondHightlightCallback","bond","originClicked","onMouseClicked","_len","arguments","length","event","Array","_key","res","call","setAtomSelection_0","draw","__selector","_jsx","children","onMouseDown","onMouseMove","onClick","atomA","mBondAtom","atomB","isSelectedBond_0","deselectAllAtoms","style","height","App","StreamlitComponentBase","constructor","render","content","this","args","ftype","preset_selections","min_allowed_atoms","max_allowed_atoms_percent","id","overflow","scrollBehavior","selectionWithHydrogen","forceResize","overflowContainer","document","getElementById","scrollTop","scrollHeight","selectedAtomsSet","status","innerText","concat","Streamlit","setComponentValue","Math","floor","queue","_this$ref$model$mMol$","start","shift","delete","conn","has","componentDidMount","setFrameHeight","componentDidUpdate","withStreamlitConnection","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3292f3e4.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport { useResizeObserver } from 'react-use-observer';\n\nconst getHeight = (width: number) => (2 * width) / 3;\n\ninterface Mol2DSelectorProps {\n    onMol2DInstanceCreated: (instance: any, selectionWithHydrogen: number[]) => void;\n    onSelectionChanged: (selection: number[], selectionWithHydrogen: number[]) => void;\n    selection: number[];\n    mol?: string;\n    smiles?: string;\n    nop_selection?: boolean;\n}\n\nexport const Mol2DSelector = React.memo((props: Mol2DSelectorProps) => {\n    const {\n        mol,\n        smiles,\n        selection,\n        nop_selection,\n        onMol2DInstanceCreated,\n        onSelectionChanged,\n    } = props;\n    // const scale = useRef<number>(1);\n    const domRef = useRef<any>();\n    const selector = useRef<any>();\n    const resize = useRef<any>();\n    const highlightAtom = useRef<number | undefined>(undefined);\n    const highlightBond = useRef<number | undefined>(undefined);\n    const isMoving = useRef<boolean>(false);\n    const [ref, resizeObserverEntry] = useResizeObserver();\n    const { width = 0 } = resizeObserverEntry.contentRect || {};\n    const hydrogenObj = useRef<{ [key: number]: Set<number> }>({});\n\n    // const onScale = (scaleStep: number) => {\n    //     const { mMol } = selector.current.model;\n    //     const newScale = scale.current + scaleStep;\n    //     const center = { x: width / 2, y: getHeight(width) / 2 };\n    //     const rate = newScale / scale.current;\n    //     mMol.mCoordinates.forEach((atom: { x_0: number; y_0: number }, index: number) => {\n    //         mMol.mCoordinates[index].x_0 = atom.x_0 + (atom.x_0 - center.x) * (rate - 1);\n    //         mMol.mCoordinates[index].y_0 = atom.y_0 + (atom.y_0 - center.y) * (rate - 1);\n    //     });\n    //     scale.current = newScale;\n    //     selector.current.drawPane.draw();\n    // };\n    const getSelectedAtoms = useCallback((withHydrogen?: boolean) => {\n        if (!selector?.current?.model) {\n            return [];\n        }\n        const { mMol } = selector.current.model;\n        const selected = [];\n        for (let atom = 0; atom < mMol.getAllAtoms_0(); atom++) {\n            if (mMol.isSelectedAtom_0(atom)) {\n                selected.push(atom);\n                if (withHydrogen && hydrogenObj.current[atom]?.size) {\n                    hydrogenObj.current[atom].forEach(atom => {\n                        selected.push(atom);\n                    });\n                }\n            }\n        }\n        return selected;\n    }, []);\n\n    useEffect(() => {\n        if (!domRef.current || width <= 0) return;\n        if (!selector.current) {\n            selector.current = new window.OCL.StructureEditor(domRef.current, true, 1);\n            const instance = selector.current;\n            if (mol) {\n                instance.model.setMolFile_0(mol);\n            } else {\n                instance.model.setSmiles_0(smiles);\n            }\n            instance.toolBar.currentAction.shift_0 = true;\n            instance.toolBar.currentAction.rectangular = true;\n            instance.model.mMol.mConnAtom.forEach((atoms: [], atomId: number) => {\n                atoms.forEach((atom: number) => {\n                    if (instance.model.mMol.mAtomicNo[atom] === 1) {\n                        hydrogenObj.current[atomId] = hydrogenObj.current[atomId] || new Set();\n                        hydrogenObj.current[atomId].add(atom);\n                    }\n                });\n            });\n            selector.current.model.mMol.removeExplicitHydrogens_0();\n            instance.model.cleanMolecule();\n            instance.setAtomHightlightCallback((atom: number, selected: boolean) => {\n                highlightAtom.current = selected ? atom : undefined;\n            });\n\n            instance.setBondHightlightCallback((bond: number, selected: boolean) => {\n                highlightBond.current = selected ? bond : undefined;\n            });\n\n            const originClicked = instance.onMouseClicked;\n            instance.onMouseClicked = (...event: any) => {\n                const res = originClicked.call(instance, ...event);\n                if (res) {\n                    highlightAtom.current = res.atom === -1 ? undefined : res.atom;\n                    highlightBond.current = res.bond === -1 ? undefined : res.bond;\n                }\n            }\n\n            // if (!isEditing) {\n            //     // @ts-ignore\n            //     // eslint-disable-next-line no-underscore-dangle\n            //     window.__dp_mol2d_selector_locked = true;\n            //     instance.drawPane.backgroundColor = '#FFFFFF';\n            // }\n            selection.forEach((atom: number) => {\n                instance.model.mMol.setAtomSelection_0(atom, true);\n            });\n            instance.drawPane.draw();\n            // @ts-ignore\n            // eslint-disable-next-line no-underscore-dangle\n            window.__selector = selector.current;\n            onMol2DInstanceCreated(selector.current, getSelectedAtoms(true));\n        } else {\n            if (resize.current) clearTimeout(resize.current);\n            resize.current = setTimeout(() => {\n                selector.current.drawPane.setSize_0(width, getHeight(width));\n            }, 500);\n        }\n    }, [getSelectedAtoms, mol, onMol2DInstanceCreated, selection, smiles, width]);\n\n    // useEffect(() => {\n    //     if (!selector.current) return;\n    //     const { drawPane } = selector.current;\n    //     // @ts-ignore\n    //     // eslint-disable-next-line no-underscore-dangle\n    //     window.__dp_mol2d_selector_locked = !isEditing;\n    //     if (isEditing) {\n    //         drawPane.backgroundColor = '#F2F5FA';\n    //         drawPane.draw();\n    //     } else {\n    //         drawPane.backgroundColor = '#FFFFFF';\n    //         drawPane.draw();\n    //     }\n    // }, [isEditing]);\n\n    return (\n        <div ref={ref}>\n            <div\n                onMouseDown={() => {\n                    isMoving.current = false;\n                }}\n                onMouseMove={() => {\n                    isMoving.current = true;\n                }}\n                onClick={() => {\n                    if (nop_selection){\n                        return\n                    }\n                    const { model, drawPane, toolBar } = selector.current;\n\n                    if (highlightAtom.current !== undefined) {\n                        const selected = !model.mMol.isSelectedAtom_0(highlightAtom.current);\n                        model.mMol.setAtomSelection_0(highlightAtom.current, selected);\n                        drawPane.draw();\n                    } else if (highlightBond.current !== undefined) {\n                        const atomA = model.mMol.mBondAtom[0][highlightBond.current];\n                        const atomB = model.mMol.mBondAtom[1][highlightBond.current];\n                        const selected = !model.mMol.isSelectedBond_0(highlightBond.current);\n                        model.mMol.setAtomSelection_0(atomA, selected);\n                        model.mMol.setAtomSelection_0(atomB, selected);\n                        drawPane.draw();\n                    } else if (isMoving.current) {\n                        highlightAtom.current = undefined;\n                        highlightBond.current = undefined;\n                    } else {\n                        toolBar.currentAction.deselectAllAtoms();\n                        drawPane.draw();\n                        highlightAtom.current = undefined;\n                        highlightBond.current = undefined;\n                    }\n                    isMoving.current = false;\n                    onSelectionChanged(getSelectedAtoms(), getSelectedAtoms(true));\n                }}\n                view-only=\"true\"\n                ref={domRef}\n                style={{ width, height: getHeight(width) }}\n            />\n        </div>\n    );\n});\n","import {Streamlit, StreamlitComponentBase, withStreamlitConnection} from \"streamlit-component-lib\";\nimport React, {ReactNode} from \"react\";\nimport {Mol2DSelector} from \"./molecular\";\n\ninterface State {}\n\n\nclass App extends StreamlitComponentBase<State> {\n\n    componentDidMount(): void {\n        Streamlit.setFrameHeight()\n    }\n\n    componentDidUpdate(): void {\n        Streamlit.setFrameHeight()\n    }\n    \n    forceResize(): void {\n        Streamlit.setFrameHeight()\n    }\n    \n    ref: any = null\n\n    public render = (): ReactNode => {\n        const content = this.props.args[\"content\"]\n        const ftype = this.props.args[\"ftype\"]\n        const preset_selections = this.props.args[\"preset_selections\"]\n        const nop_selection = this.props.args[\"nop_selection\"]\n        const min_allowed_atoms = this.props.args[\"min_allowed_atoms\"]\n        const max_allowed_atoms_percent = this.props.args[\"max_allowed_atoms_percent\"]\n        const height = this.props.args[\"height\"]\n        return (\n            <div id=\"overflow\" style={height? {height: height, overflow: \"scroll\", scrollBehavior: \"smooth\"}:{}}>\n            <Mol2DSelector\n                nop_selection={nop_selection}\n                smiles={ftype === 'smiles' ? content : ''}\n                mol={ftype === 'mol' ? content : ''}\n                onMol2DInstanceCreated={(instance, selectionWithHydrogen) => {\n                    this.forceResize();\n                    this.ref = instance;\n                    var overflowContainer = document.getElementById('overflow');\n                    overflowContainer && (overflowContainer.scrollTop = overflowContainer.scrollHeight/2 - 100);\n                }}\n                onSelectionChanged={(selection, selectionWithHydrogen) => {\n                    if (nop_selection){\n                        return\n                    }\n                    const selectedAtomsSet = new Set(selection);\n                    const status = document.getElementById('status');\n                    if (selection.length < min_allowed_atoms) {\n                        status && (status.innerText = `Select at least ${min_allowed_atoms} heavy atoms.`);\n                        this.forceResize();\n                        Streamlit.setComponentValue(null)\n                        return;\n                    }\n                    if (\n                        selection.length >= Math.floor(this.ref.model.mMol.getAllAtoms_0() * max_allowed_atoms_percent)\n                    ) {\n                        status && (status.innerText = `Select up to ${max_allowed_atoms_percent*100}% of heavy atoms.`);\n                        this.forceResize();\n                        Streamlit.setComponentValue(null)\n                        return;\n                    }\n                    const queue = [selection[0]];\n                    while (queue.length) {\n                        const start = queue.shift() as number;\n                        selectedAtomsSet.delete(start);\n                        this.ref.model.mMol.mConnAtom[start]?.forEach((conn: number) => {\n                            if (selectedAtomsSet.has(conn)) {\n                                queue.push(conn);\n                                selectedAtomsSet.delete(conn);\n                            }\n                        });\n                    }\n                    if (selectedAtomsSet.size) {\n                        status && (status.innerText = \"Selected atoms need to be connected.\");\n                        this.forceResize();\n                        Streamlit.setComponentValue(null)\n                        return;\n                    }\n                    status && (status.innerText = \"Selected atoms successfully.\");\n                    this.forceResize();\n                    Streamlit.setComponentValue({\n                        selection,\n                        selectionWithHydrogen,\n                    })\n                }}\n                selection={preset_selections? preset_selections : []}\n            />\n            </div>\n        )\n    }\n}\nexport default withStreamlitConnection(App)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}