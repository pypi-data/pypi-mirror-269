# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class GetAllFlcPolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume_name': 'str',
        'first': 'int',
        'number': 'int',
        'order_by': 'str',
        'descend': 'str'
    }

    attribute_map = {
        'volume_name': 'volume_name',
        'first': 'first',
        'number': 'number',
        'order_by': 'order_by',
        'descend': 'descend'
    }

    def __init__(self, volume_name=None, first=None, number=None, order_by=None, descend=None, _configuration=None):  # noqa: E501
        """GetAllFlcPolicies - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._volume_name = None
        self._first = None
        self._number = None
        self._order_by = None
        self._descend = None
        self.discriminator = None

        if volume_name is not None:
            self.volume_name = volume_name
        if first is not None:
            self.first = first
        if number is not None:
            self.number = number
        if order_by is not None:
            self.order_by = order_by
        if descend is not None:
            self.descend = descend

    @property
    def volume_name(self):
        """Gets the volume_name of this GetAllFlcPolicies.  # noqa: E501

        Show file lifecycle policies attached to a given volume.  # noqa: E501

        :return: The volume_name of this GetAllFlcPolicies.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this GetAllFlcPolicies.

        Show file lifecycle policies attached to a given volume.  # noqa: E501

        :param volume_name: The volume_name of this GetAllFlcPolicies.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def first(self):
        """Gets the first of this GetAllFlcPolicies.  # noqa: E501

        Retrieve policies starting from the given index. Can be used for pagination with the number parameter.  # noqa: E501

        :return: The first of this GetAllFlcPolicies.  # noqa: E501
        :rtype: int
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this GetAllFlcPolicies.

        Retrieve policies starting from the given index. Can be used for pagination with the number parameter.  # noqa: E501

        :param first: The first of this GetAllFlcPolicies.  # noqa: E501
        :type: int
        """

        self._first = first

    @property
    def number(self):
        """Gets the number of this GetAllFlcPolicies.  # noqa: E501

        Retrieve the given number of policies. Can be used for pagination with the first parameter.  # noqa: E501

        :return: The number of this GetAllFlcPolicies.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GetAllFlcPolicies.

        Retrieve the given number of policies. Can be used for pagination with the first parameter.  # noqa: E501

        :param number: The number of this GetAllFlcPolicies.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def order_by(self):
        """Gets the order_by of this GetAllFlcPolicies.  # noqa: E501

        Order policies by given attribute.  # noqa: E501

        :return: The order_by of this GetAllFlcPolicies.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GetAllFlcPolicies.

        Order policies by given attribute.  # noqa: E501

        :param order_by: The order_by of this GetAllFlcPolicies.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def descend(self):
        """Gets the descend of this GetAllFlcPolicies.  # noqa: E501

        Controls order direction.  # noqa: E501

        :return: The descend of this GetAllFlcPolicies.  # noqa: E501
        :rtype: str
        """
        return self._descend

    @descend.setter
    def descend(self, descend):
        """Sets the descend of this GetAllFlcPolicies.

        Controls order direction.  # noqa: E501

        :param descend: The descend of this GetAllFlcPolicies.  # noqa: E501
        :type: str
        """

        self._descend = descend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllFlcPolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllFlcPolicies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAllFlcPolicies):
            return True

        return self.to_dict() != other.to_dict()
