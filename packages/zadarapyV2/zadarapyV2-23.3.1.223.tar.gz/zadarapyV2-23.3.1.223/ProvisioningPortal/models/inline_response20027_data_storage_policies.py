# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse20027DataStoragePolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'policy_name': 'str',
        'replicas': 'int',
        'sp_type_id': 'int',
        'storage_policy_type': 'str',
        'data_fragments': 'int',
        'parity_fragments': 'int'
    }

    attribute_map = {
        'display_name': 'display_name',
        'policy_name': 'policy_name',
        'replicas': 'replicas',
        'sp_type_id': 'sp_type_id',
        'storage_policy_type': 'storage_policy_type',
        'data_fragments': 'data_fragments',
        'parity_fragments': 'parity_fragments'
    }

    def __init__(self, display_name=None, policy_name=None, replicas=None, sp_type_id=None, storage_policy_type=None, data_fragments=None, parity_fragments=None, _configuration=None):  # noqa: E501
        """InlineResponse20027DataStoragePolicies - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._policy_name = None
        self._replicas = None
        self._sp_type_id = None
        self._storage_policy_type = None
        self._data_fragments = None
        self._parity_fragments = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if policy_name is not None:
            self.policy_name = policy_name
        if replicas is not None:
            self.replicas = replicas
        if sp_type_id is not None:
            self.sp_type_id = sp_type_id
        if storage_policy_type is not None:
            self.storage_policy_type = storage_policy_type
        if data_fragments is not None:
            self.data_fragments = data_fragments
        if parity_fragments is not None:
            self.parity_fragments = parity_fragments

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The display_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20027DataStoragePolicies.


        :param display_name: The display_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def policy_name(self):
        """Gets the policy_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The policy_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this InlineResponse20027DataStoragePolicies.


        :param policy_name: The policy_name of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def replicas(self):
        """Gets the replicas of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The replicas of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this InlineResponse20027DataStoragePolicies.


        :param replicas: The replicas of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def sp_type_id(self):
        """Gets the sp_type_id of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The sp_type_id of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._sp_type_id

    @sp_type_id.setter
    def sp_type_id(self, sp_type_id):
        """Sets the sp_type_id of this InlineResponse20027DataStoragePolicies.


        :param sp_type_id: The sp_type_id of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: int
        """

        self._sp_type_id = sp_type_id

    @property
    def storage_policy_type(self):
        """Gets the storage_policy_type of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The storage_policy_type of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._storage_policy_type

    @storage_policy_type.setter
    def storage_policy_type(self, storage_policy_type):
        """Sets the storage_policy_type of this InlineResponse20027DataStoragePolicies.


        :param storage_policy_type: The storage_policy_type of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: str
        """

        self._storage_policy_type = storage_policy_type

    @property
    def data_fragments(self):
        """Gets the data_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The data_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._data_fragments

    @data_fragments.setter
    def data_fragments(self, data_fragments):
        """Sets the data_fragments of this InlineResponse20027DataStoragePolicies.


        :param data_fragments: The data_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: int
        """

        self._data_fragments = data_fragments

    @property
    def parity_fragments(self):
        """Gets the parity_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501


        :return: The parity_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._parity_fragments

    @parity_fragments.setter
    def parity_fragments(self, parity_fragments):
        """Sets the parity_fragments of this InlineResponse20027DataStoragePolicies.


        :param parity_fragments: The parity_fragments of this InlineResponse20027DataStoragePolicies.  # noqa: E501
        :type: int
        """

        self._parity_fragments = parity_fragments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027DataStoragePolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027DataStoragePolicies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20027DataStoragePolicies):
            return True

        return self.to_dict() != other.to_dict()
