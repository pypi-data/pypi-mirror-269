# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse20025Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocation_zones': 'list[str]',
        'cache': 'InlineResponse20025Cache',
        'app_engine': 'InlineResponse20025AppEngine',
        'status': 'str',
        'description': 'str',
        'fibre_channel': 'bool',
        'drives': 'InlineResponse20025Drives',
        'drive_count': 'int',
        'engine': 'InlineResponse20025Engine',
        'nova_id': 'int',
        'management_url': 'str',
        'initial_passcode': 'str',
        'ip_address': 'str',
        'id': 'int',
        'time_created_gmt': 'str',
        'name': 'str',
        'locked_down': 'int',
        'provider': 'InlineResponse20025Provider',
        'product': 'str',
        'type': 'str',
        'virtual_network_interfaces': 'list[str]',
        'flc_enabled': 'bool',
        'iscsi_dual_target_mode_enabled': 'bool'
    }

    attribute_map = {
        'allocation_zones': 'allocation-zones',
        'cache': 'cache',
        'app_engine': 'app_engine',
        'status': 'status',
        'description': 'description',
        'fibre_channel': 'fibre_channel',
        'drives': 'drives',
        'drive_count': 'drive_count',
        'engine': 'engine',
        'nova_id': 'nova_id',
        'management_url': 'management_url',
        'initial_passcode': 'initial_passcode',
        'ip_address': 'ip_address',
        'id': 'id',
        'time_created_gmt': 'time_created_gmt',
        'name': 'name',
        'locked_down': 'locked_down',
        'provider': 'provider',
        'product': 'product',
        'type': 'type',
        'virtual_network_interfaces': 'virtual_network_interfaces',
        'flc_enabled': 'flc_enabled',
        'iscsi_dual_target_mode_enabled': 'iscsi_dual_target_mode_enabled'
    }

    def __init__(self, allocation_zones=None, cache=None, app_engine=None, status=None, description=None, fibre_channel=None, drives=None, drive_count=None, engine=None, nova_id=None, management_url=None, initial_passcode=None, ip_address=None, id=None, time_created_gmt=None, name=None, locked_down=None, provider=None, product=None, type=None, virtual_network_interfaces=None, flc_enabled=None, iscsi_dual_target_mode_enabled=None, _configuration=None):  # noqa: E501
        """InlineResponse20025Data - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allocation_zones = None
        self._cache = None
        self._app_engine = None
        self._status = None
        self._description = None
        self._fibre_channel = None
        self._drives = None
        self._drive_count = None
        self._engine = None
        self._nova_id = None
        self._management_url = None
        self._initial_passcode = None
        self._ip_address = None
        self._id = None
        self._time_created_gmt = None
        self._name = None
        self._locked_down = None
        self._provider = None
        self._product = None
        self._type = None
        self._virtual_network_interfaces = None
        self._flc_enabled = None
        self._iscsi_dual_target_mode_enabled = None
        self.discriminator = None

        if allocation_zones is not None:
            self.allocation_zones = allocation_zones
        if cache is not None:
            self.cache = cache
        if app_engine is not None:
            self.app_engine = app_engine
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description
        if fibre_channel is not None:
            self.fibre_channel = fibre_channel
        if drives is not None:
            self.drives = drives
        if drive_count is not None:
            self.drive_count = drive_count
        if engine is not None:
            self.engine = engine
        if nova_id is not None:
            self.nova_id = nova_id
        if management_url is not None:
            self.management_url = management_url
        if initial_passcode is not None:
            self.initial_passcode = initial_passcode
        if ip_address is not None:
            self.ip_address = ip_address
        if id is not None:
            self.id = id
        if time_created_gmt is not None:
            self.time_created_gmt = time_created_gmt
        if name is not None:
            self.name = name
        if locked_down is not None:
            self.locked_down = locked_down
        if provider is not None:
            self.provider = provider
        if product is not None:
            self.product = product
        if type is not None:
            self.type = type
        if virtual_network_interfaces is not None:
            self.virtual_network_interfaces = virtual_network_interfaces
        if flc_enabled is not None:
            self.flc_enabled = flc_enabled
        if iscsi_dual_target_mode_enabled is not None:
            self.iscsi_dual_target_mode_enabled = iscsi_dual_target_mode_enabled

    @property
    def allocation_zones(self):
        """Gets the allocation_zones of this InlineResponse20025Data.  # noqa: E501


        :return: The allocation_zones of this InlineResponse20025Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._allocation_zones

    @allocation_zones.setter
    def allocation_zones(self, allocation_zones):
        """Sets the allocation_zones of this InlineResponse20025Data.


        :param allocation_zones: The allocation_zones of this InlineResponse20025Data.  # noqa: E501
        :type: list[str]
        """

        self._allocation_zones = allocation_zones

    @property
    def cache(self):
        """Gets the cache of this InlineResponse20025Data.  # noqa: E501


        :return: The cache of this InlineResponse20025Data.  # noqa: E501
        :rtype: InlineResponse20025Cache
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this InlineResponse20025Data.


        :param cache: The cache of this InlineResponse20025Data.  # noqa: E501
        :type: InlineResponse20025Cache
        """

        self._cache = cache

    @property
    def app_engine(self):
        """Gets the app_engine of this InlineResponse20025Data.  # noqa: E501


        :return: The app_engine of this InlineResponse20025Data.  # noqa: E501
        :rtype: InlineResponse20025AppEngine
        """
        return self._app_engine

    @app_engine.setter
    def app_engine(self, app_engine):
        """Sets the app_engine of this InlineResponse20025Data.


        :param app_engine: The app_engine of this InlineResponse20025Data.  # noqa: E501
        :type: InlineResponse20025AppEngine
        """

        self._app_engine = app_engine

    @property
    def status(self):
        """Gets the status of this InlineResponse20025Data.  # noqa: E501


        :return: The status of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20025Data.


        :param status: The status of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this InlineResponse20025Data.  # noqa: E501


        :return: The description of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20025Data.


        :param description: The description of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fibre_channel(self):
        """Gets the fibre_channel of this InlineResponse20025Data.  # noqa: E501


        :return: The fibre_channel of this InlineResponse20025Data.  # noqa: E501
        :rtype: bool
        """
        return self._fibre_channel

    @fibre_channel.setter
    def fibre_channel(self, fibre_channel):
        """Sets the fibre_channel of this InlineResponse20025Data.


        :param fibre_channel: The fibre_channel of this InlineResponse20025Data.  # noqa: E501
        :type: bool
        """

        self._fibre_channel = fibre_channel

    @property
    def drives(self):
        """Gets the drives of this InlineResponse20025Data.  # noqa: E501


        :return: The drives of this InlineResponse20025Data.  # noqa: E501
        :rtype: InlineResponse20025Drives
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this InlineResponse20025Data.


        :param drives: The drives of this InlineResponse20025Data.  # noqa: E501
        :type: InlineResponse20025Drives
        """

        self._drives = drives

    @property
    def drive_count(self):
        """Gets the drive_count of this InlineResponse20025Data.  # noqa: E501


        :return: The drive_count of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._drive_count

    @drive_count.setter
    def drive_count(self, drive_count):
        """Sets the drive_count of this InlineResponse20025Data.


        :param drive_count: The drive_count of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._drive_count = drive_count

    @property
    def engine(self):
        """Gets the engine of this InlineResponse20025Data.  # noqa: E501


        :return: The engine of this InlineResponse20025Data.  # noqa: E501
        :rtype: InlineResponse20025Engine
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this InlineResponse20025Data.


        :param engine: The engine of this InlineResponse20025Data.  # noqa: E501
        :type: InlineResponse20025Engine
        """

        self._engine = engine

    @property
    def nova_id(self):
        """Gets the nova_id of this InlineResponse20025Data.  # noqa: E501


        :return: The nova_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._nova_id

    @nova_id.setter
    def nova_id(self, nova_id):
        """Sets the nova_id of this InlineResponse20025Data.


        :param nova_id: The nova_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._nova_id = nova_id

    @property
    def management_url(self):
        """Gets the management_url of this InlineResponse20025Data.  # noqa: E501


        :return: The management_url of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._management_url

    @management_url.setter
    def management_url(self, management_url):
        """Sets the management_url of this InlineResponse20025Data.


        :param management_url: The management_url of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._management_url = management_url

    @property
    def initial_passcode(self):
        """Gets the initial_passcode of this InlineResponse20025Data.  # noqa: E501


        :return: The initial_passcode of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._initial_passcode

    @initial_passcode.setter
    def initial_passcode(self, initial_passcode):
        """Sets the initial_passcode of this InlineResponse20025Data.


        :param initial_passcode: The initial_passcode of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._initial_passcode = initial_passcode

    @property
    def ip_address(self):
        """Gets the ip_address of this InlineResponse20025Data.  # noqa: E501


        :return: The ip_address of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InlineResponse20025Data.


        :param ip_address: The ip_address of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def id(self):
        """Gets the id of this InlineResponse20025Data.  # noqa: E501


        :return: The id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20025Data.


        :param id: The id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time_created_gmt(self):
        """Gets the time_created_gmt of this InlineResponse20025Data.  # noqa: E501


        :return: The time_created_gmt of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._time_created_gmt

    @time_created_gmt.setter
    def time_created_gmt(self, time_created_gmt):
        """Sets the time_created_gmt of this InlineResponse20025Data.


        :param time_created_gmt: The time_created_gmt of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._time_created_gmt = time_created_gmt

    @property
    def name(self):
        """Gets the name of this InlineResponse20025Data.  # noqa: E501


        :return: The name of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20025Data.


        :param name: The name of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def locked_down(self):
        """Gets the locked_down of this InlineResponse20025Data.  # noqa: E501


        :return: The locked_down of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._locked_down

    @locked_down.setter
    def locked_down(self, locked_down):
        """Sets the locked_down of this InlineResponse20025Data.


        :param locked_down: The locked_down of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._locked_down = locked_down

    @property
    def provider(self):
        """Gets the provider of this InlineResponse20025Data.  # noqa: E501


        :return: The provider of this InlineResponse20025Data.  # noqa: E501
        :rtype: InlineResponse20025Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse20025Data.


        :param provider: The provider of this InlineResponse20025Data.  # noqa: E501
        :type: InlineResponse20025Provider
        """

        self._provider = provider

    @property
    def product(self):
        """Gets the product of this InlineResponse20025Data.  # noqa: E501


        :return: The product of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InlineResponse20025Data.


        :param product: The product of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def type(self):
        """Gets the type of this InlineResponse20025Data.  # noqa: E501


        :return: The type of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20025Data.


        :param type: The type of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def virtual_network_interfaces(self):
        """Gets the virtual_network_interfaces of this InlineResponse20025Data.  # noqa: E501


        :return: The virtual_network_interfaces of this InlineResponse20025Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_network_interfaces

    @virtual_network_interfaces.setter
    def virtual_network_interfaces(self, virtual_network_interfaces):
        """Sets the virtual_network_interfaces of this InlineResponse20025Data.


        :param virtual_network_interfaces: The virtual_network_interfaces of this InlineResponse20025Data.  # noqa: E501
        :type: list[str]
        """

        self._virtual_network_interfaces = virtual_network_interfaces

    @property
    def flc_enabled(self):
        """Gets the flc_enabled of this InlineResponse20025Data.  # noqa: E501


        :return: The flc_enabled of this InlineResponse20025Data.  # noqa: E501
        :rtype: bool
        """
        return self._flc_enabled

    @flc_enabled.setter
    def flc_enabled(self, flc_enabled):
        """Sets the flc_enabled of this InlineResponse20025Data.


        :param flc_enabled: The flc_enabled of this InlineResponse20025Data.  # noqa: E501
        :type: bool
        """

        self._flc_enabled = flc_enabled

    @property
    def iscsi_dual_target_mode_enabled(self):
        """Gets the iscsi_dual_target_mode_enabled of this InlineResponse20025Data.  # noqa: E501


        :return: The iscsi_dual_target_mode_enabled of this InlineResponse20025Data.  # noqa: E501
        :rtype: bool
        """
        return self._iscsi_dual_target_mode_enabled

    @iscsi_dual_target_mode_enabled.setter
    def iscsi_dual_target_mode_enabled(self, iscsi_dual_target_mode_enabled):
        """Sets the iscsi_dual_target_mode_enabled of this InlineResponse20025Data.


        :param iscsi_dual_target_mode_enabled: The iscsi_dual_target_mode_enabled of this InlineResponse20025Data.  # noqa: E501
        :type: bool
        """

        self._iscsi_dual_target_mode_enabled = iscsi_dual_target_mode_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20025Data):
            return True

        return self.to_dict() != other.to_dict()
