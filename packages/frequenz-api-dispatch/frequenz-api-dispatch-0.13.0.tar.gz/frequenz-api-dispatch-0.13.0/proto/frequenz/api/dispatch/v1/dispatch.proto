// protolint:disable MAX_LINE_LENGTH

// Frequenz Dispatch Automation API
//
// Copyright:
// Copyright 2022 Frequenz Energy-as-a-Service GmbH
//
// License:
// MIT

syntax = "proto3";

package frequenz.api.dispatch.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "frequenz/api/common/v1/microgrid/components/components.proto";

// Service providing operations related to dispatching microgrid components.
//
// #### Overview
//
// The API serves to automate the process of electricity dispatches for microgrids.
// In the context of the energy industry, a 'dispatch' refers to the act of routing electrical power
// between different components within a microgrid or between a microgrid and the main grid.
// This could be for the purpose of supply (sending electricity to the grid or components within the microgrid),
// or demand (drawing electricity from the grid or from other components like batteries and solar arrays).
//
// #### Objective
//
// The primary objective of this API is to streamline and automate the complex task of electricity dispatching,
// making it easier to manage local electricity supply and demand efficiently.
//
// #### Key Features
//
// - Dispatching Electricity: Comprehensive CRUD operations for dispatching microgrid components.
// - Automation: Support for one-time as well as recurring dispatches based on flexible recurrence rules.
// - Fine-grained control: Dispatch individual microgrid components or entire component categories.
//
// #### Example Use Cases
//
// - Charging or discharging a battery based on optimal time-of-use rates.
// - Limiting the output of a Photovoltaic (PV) array during periods of low demand.
// - Invoking Frequency Containment Reserves (FCR) or Automatic Frequency Restoration Reserves (aFRR) to
//    support grid operations.
// - Adjusting the output of electric vehicle charging stations to match grid availability or to avoid peak pricing.
//
// #### Target Audience
//
// This API is designed for application developers in the energy sector who focus on the tasks of optimizing microgrid
// electricity flows. Its design aims to be as developer-friendly as possible, requiring no prior knowledge in
// electrical engineering and systems.
service MicrogridDispatchService {
  // Returns a list of all dispatches
  rpc ListMicrogridDispatches(DispatchListRequest) returns (DispatchList);

  // Create a new dispatch
  rpc CreateMicrogridDispatch(DispatchCreateRequest) returns (google.protobuf.Empty);

  // Update a dispatch
  rpc UpdateMicrogridDispatch(DispatchUpdateRequest) returns (google.protobuf.Empty);

  // Get a single dispatch
  rpc GetMicrogridDispatch(DispatchGetRequest) returns (Dispatch);

  // Delete a given dispatch
  rpc DeleteMicrogridDispatch(DispatchDeleteRequest) returns (google.protobuf.Empty);
}

// Message representing one dispatch.
//
// Timezone Note: Timestamps are in UTC. It is the responsibility of each microgrid to translate UTC
// to its local timezone.
message Dispatch {
  // The dispatch identifier
  uint64 id = 1;

  // The microgrid identifier
  uint64 microgrid_id = 2;

  // The dispatch type.
  // Contains user-defined information about what "type" of dispatch this is.
  // Downstream applications that consume the dispatch API are responsible for
  // understanding and processing this field.
  string type = 3;

  // The creation time in UTC
  // This is set when a dispatch is created via the create request message
  google.protobuf.Timestamp create_time = 4;

  // The update time in UTC
  // This is set when a dispatch is modified via the update request message
  google.protobuf.Timestamp update_time = 5;

  // The start time in UTC
  google.protobuf.Timestamp start_time = 6;

  // Duration in seconds
  uint32 duration = 7;

  // The component selector
  ComponentSelector selector = 8;

  // The "active" status
  // An active dispatch is eligible for processing, either immediately or at a scheduled
  // time in the future, including recurring dispatches. If a dispatch is set to
  // inactive, it won't be processed even if it matches all other conditions, allowing
  // for temporary disabling of dispatches without deletion.
  bool is_active = 9;

  // The "dry run" status
  // A dry run dispatch is executed for logging and monitoring purposes
  // without affecting the microgrid components. This is useful, for example,
  // in scenarios where a user may want to test dispatch behavior without
  // actually affecting any component states.
  // Notably, a dispatch can be both "dry run" and "active," allowing for
  // the system to generate logs and observe behavior without making actual changes.
  bool is_dry_run = 10;

  // The dispatch payload
  google.protobuf.Struct payload = 11;

  // The recurrence rule
  RecurrenceRule recurrence = 12;
}

// Filter parameter for specifying multiple time intervals
message TimeIntervalFilter {
  // Filter by start_time >= this timestamp
  google.protobuf.Timestamp start_from = 1;

  // Filter by start_time < this timestamp
  google.protobuf.Timestamp start_to = 2;

  // Filter by recurrence.end_criteria.until >= this timestamp
  google.protobuf.Timestamp end_from = 3;

  // Filter by recurrence.end_criteria.until < this timestamp
  google.protobuf.Timestamp end_to = 4;
}

// Parameter for controlling which components a dispatch applies to
// Either a set of component IDs, or all components belonging to a category
message ComponentSelector {
  oneof selector {
    // Set of component IDs
    ComponentIDs component_ids = 1;

    // Component category
    frequenz.api.common.v1.microgrid.components.ComponentCategory component_category = 2;
  }
}

// Wrapper for controlling dispatches with a set of component IDs
message ComponentIDs {
  // Set of component IDs
  repeated uint64 component_ids = 1;
}

// Ruleset governing when and how a dispatch should re-occur.
//
// Timezone Note: Timestamps are in UTC. It is the responsibility of each microgrid to translate UTC
// to its local timezone.
//
// This definition tries to adhere closely to the iCalendar specification ([RFC5545]),
// particularly for recurrence rules. For advanced use-cases or further clarifications,
// refer to [RFC5545].
//
// [RFC5545]: https://tools.ietf.org/html/rfc5545
//
// #### Examples
//
// ##### Every 6 months
//
// ```proto
// message RecurrenceRule {
//   Frequency freq = FREQUENCY_MONTHLY;
//   uint32 interval = 6;
// }
// ```
//
// ##### Weekends only
//
// ```proto
// message RecurrenceRule {
//   Frequency freq = FREQUENCY_WEEKLY;
//   repeated Weekday byweekdays = [WEEKDAY_SATURDAY, WEEKDAY_SUNDAY];
// }
// ```
//
// ##### At midnight
//
// Every day at midnight.
//
// ```proto
// message RecurrenceRule {
//   Frequency freq = FREQUENCY_DAILY;
//   repeated uint32 byhours = [0];
// }
// ```
//
// ##### Nightly
//
// Assuming "night" means from 8 PM to 6 AM.
//
// ```proto
// message RecurrenceRule {
//   Frequency freq = FREQUENCY_DAILY;
//   repeated uint32 byhours = [20, 21, 22, 23, 0, 1, 2, 3, 4, 5];
// }
// ```
message RecurrenceRule {
  // Enum representing the day of the week
  enum Weekday {
    WEEKDAY_UNSPECIFIED = 0;
    WEEKDAY_MONDAY = 1;
    WEEKDAY_TUESDAY = 2;
    WEEKDAY_WEDNESDAY = 3;
    WEEKDAY_THURSDAY = 4;
    WEEKDAY_FRIDAY = 5;
    WEEKDAY_SATURDAY = 6;
    WEEKDAY_SUNDAY = 7;
  }

  // Enum representing the frequency of the recurrence
  enum Frequency {
    FREQUENCY_UNSPECIFIED = 0;
    FREQUENCY_MINUTELY = 1;
    FREQUENCY_HOURLY = 2;
    FREQUENCY_DAILY = 3;
    FREQUENCY_WEEKLY = 4;
    FREQUENCY_MONTHLY = 5;
  }

  // Controls when a recurring dispatch should end
  message EndCriteria {
    oneof count_or_until {
      // The number of times this dispatch should recur.
      // If this field is set, the dispatch will recur the given number of times.
      uint32 count = 1;

      // The end time of this dispatch in UTC.
      // If this field is set, the dispatch will recur until the given timestamp.
      google.protobuf.Timestamp until = 2;
    }
  }

  // The frequency specifier of this recurring dispatch
  Frequency freq = 1;

  // How often this dispatch should recur, based on the frequency
  // Example:
  // - Every 2 hours:
  //   freq = FREQUENCY_HOURLY
  //   interval = 2
  uint32 interval = 2;

  // When this dispatch should end.
  // A dispatch can either recur a fixed number of times, or until a given timestamp.
  // If this field is not set, the dispatch will recur indefinitely.bool
  EndCriteria end_criteria = 3;

  // On which minute(s) of the hour does the event occur
  repeated uint32 byminutes = 4;

  // On which hour(s) of the day does the event occur
  repeated uint32 byhours = 5;

  // On which day(s) of the week does the event occur
  repeated Weekday byweekdays = 6;

  // On which day(s) of the month does the event occur
  repeated uint32 bymonthdays = 7;

  // On which month(s) of the year does the event occur
  repeated uint32 bymonths = 8;
}

// Message for listing dispatches for a given microgrid, and an optional filter
message DispatchListRequest {
  // The microgrid ID
  uint64 microgrid_id = 1;

  // Additional filter parameters
  DispatchFilter filter = 2;
}

// Parameters for filtering the dispatch list
message DispatchFilter {
  // Filter by component ID or category
  repeated ComponentSelector selectors = 1;

  // Filter by time interval
  // If no interval is provided, all dispatches starting from the
  // current timestamp will be included.
  TimeIntervalFilter time_interval = 2;

  // Filter by active status
  // If this field is not set, dispatches of any active status will be included.
  optional bool is_active = 3;

  // Filter by dry run status
  // If this field is not set, dispatches of any dry run status will be included.
  optional bool is_dry_run = 4;
}

// A list of dispatches
message DispatchList {
  // The dispatches
  repeated Dispatch dispatches = 1;
}

// Message to create a new dispatch with the given attributes
message DispatchCreateRequest {
  // The microgrid identifier
  uint64 microgrid_id = 1;

  // The type of dispatch
  string type = 2;

  // The start time
  // When creating a dispatch, ensure that the starting timestamp is set to
  // the current time or any future time.
  // Timestamps earlier than the current time are not allowed.
  google.protobuf.Timestamp start_time = 3;

  // Duration in seconds
  uint32 duration = 4;

  // The component selector
  ComponentSelector selector = 5;

  // The "active" status
  bool is_active = 6;

  // The "dry run" status
  bool is_dry_run = 7;

  // The dispatch payload
  google.protobuf.Struct payload = 8;

  // The recurrence rule
  RecurrenceRule recurrence = 9;
}

// Message to update the dispatch with the given ID, with the given attributes
message DispatchUpdateRequest {
  // Message containing the updated dispatch attributes
  message DispatchUpdate {
    // Message containing the updated recurrence rule attributes
    message RecurrenceRuleUpdate {
      // The frequency specifier of this recurring dispatch
      optional RecurrenceRule.Frequency freq = 1;

      // How often this dispatch should recur, based on the frequency
      optional uint32 interval = 2;

      // When this dispatch should end.
      RecurrenceRule.EndCriteria end_criteria = 3;

      // On which minute(s) of the hour does the event occur
      repeated uint32 byminutes = 4;

      // On which hour(s) of the day does the event occur
      repeated uint32 byhours = 5;

      // On which day(s) of the week does the event occur
      repeated RecurrenceRule.Weekday byweekdays = 6;

      // On which day(s) of the month does the event occur
      repeated uint32 bymonthdays = 7;

      // On which month(s) of the year does the event occur
      repeated uint32 bymonths = 8;
    }

    // The type of dispatch
    optional string type = 1;

    // The start time
    // When updating a dispatch, ensure that the starting timestamp is set to
    // the current time or any future time.
    // Timestamps earlier than the current time are not allowed.
    google.protobuf.Timestamp start_time = 2;

    // Duration in seconds
    optional uint32 duration = 3;

    // The component selector
    ComponentSelector selector = 4;

    // The "active" status
    optional bool is_active = 5;

    // The "dry run" status
    optional bool is_dry_run = 6;

    // The dispatch payload
    google.protobuf.Struct payload = 7;

    // The recurrence rule
    RecurrenceRuleUpdate recurrence = 8;
  }

  // The dispatch identifier
  uint64 id = 1;

  // Field mask specifying which fields should be updated
  google.protobuf.FieldMask update_mask = 2;

  // The updated dispatch attributes
  DispatchUpdate update = 3;
}

// Message to get a single dispatch by its ID
message DispatchGetRequest {
  // The dispatch identifier
  uint64 id = 1;
}

// Message to delete a single dispatch by its ID
message DispatchDeleteRequest {
  // The dispatch identifier
  uint64 id = 1;
}
