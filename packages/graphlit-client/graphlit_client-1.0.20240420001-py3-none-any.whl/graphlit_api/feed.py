# Generated by ariadne-codegen
# Source: ./documents

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    EmailListingTypes,
    EntityState,
    FeedListingTypes,
    FeedServiceTypes,
    FeedTypes,
    NotionTypes,
    SharePointAuthenticationTypes,
    SiteTypes,
    TimedPolicyRecurrenceTypes,
    YouTubeTypes,
)


class Feed(BaseModel):
    feed: Optional["FeedFeed"]


class FeedFeed(BaseModel):
    id: str
    name: str
    creation_date: Any = Field(alias="creationDate")
    owner: "FeedFeedOwner"
    state: EntityState
    correlation_id: Optional[str] = Field(alias="correlationId")
    type: FeedTypes
    site: Optional["FeedFeedSite"]
    email: Optional["FeedFeedEmail"]
    issue: Optional["FeedFeedIssue"]
    rss: Optional["FeedFeedRss"]
    web: Optional["FeedFeedWeb"]
    reddit: Optional["FeedFeedReddit"]
    notion: Optional["FeedFeedNotion"]
    youtube: Optional["FeedFeedYoutube"]
    slack: Optional["FeedFeedSlack"]
    discord: Optional["FeedFeedDiscord"]
    error: Optional[str]
    last_post_date: Optional[Any] = Field(alias="lastPostDate")
    last_read_date: Optional[Any] = Field(alias="lastReadDate")
    read_count: Optional[int] = Field(alias="readCount")
    workflow: Optional["FeedFeedWorkflow"]
    schedule_policy: Optional["FeedFeedSchedulePolicy"] = Field(alias="schedulePolicy")


class FeedFeedOwner(BaseModel):
    id: str


class FeedFeedSite(BaseModel):
    site_type: SiteTypes = Field(alias="siteType")
    type: FeedServiceTypes
    is_recursive: Optional[bool] = Field(alias="isRecursive")
    s_3: Optional["FeedFeedSiteS3"] = Field(alias="s3")
    azure_blob: Optional["FeedFeedSiteAzureBlob"] = Field(alias="azureBlob")
    azure_file: Optional["FeedFeedSiteAzureFile"] = Field(alias="azureFile")
    google: Optional["FeedFeedSiteGoogle"]
    share_point: Optional["FeedFeedSiteSharePoint"] = Field(alias="sharePoint")
    one_drive: Optional["FeedFeedSiteOneDrive"] = Field(alias="oneDrive")
    google_drive: Optional["FeedFeedSiteGoogleDrive"] = Field(alias="googleDrive")


class FeedFeedSiteS3(BaseModel):
    access_key: Optional[str] = Field(alias="accessKey")
    secret_access_key: Optional[str] = Field(alias="secretAccessKey")
    bucket_name: Optional[str] = Field(alias="bucketName")
    prefix: Optional[str]
    region: Optional[str]


class FeedFeedSiteAzureBlob(BaseModel):
    storage_access_key: Optional[str] = Field(alias="storageAccessKey")
    account_name: Optional[str] = Field(alias="accountName")
    container_name: Optional[str] = Field(alias="containerName")
    prefix: Optional[str]


class FeedFeedSiteAzureFile(BaseModel):
    storage_access_key: Optional[str] = Field(alias="storageAccessKey")
    account_name: Optional[str] = Field(alias="accountName")
    share_name: Optional[str] = Field(alias="shareName")
    prefix: Optional[str]


class FeedFeedSiteGoogle(BaseModel):
    credentials: Optional[str]
    container_name: Optional[str] = Field(alias="containerName")
    prefix: Optional[str]


class FeedFeedSiteSharePoint(BaseModel):
    authentication_type: Optional[SharePointAuthenticationTypes] = Field(
        alias="authenticationType"
    )
    account_name: Optional[str] = Field(alias="accountName")
    library_id: Optional[str] = Field(alias="libraryId")
    tenant_id: Optional[str] = Field(alias="tenantId")
    refresh_token: Optional[str] = Field(alias="refreshToken")


class FeedFeedSiteOneDrive(BaseModel):
    folder_id: Optional[str] = Field(alias="folderId")
    refresh_token: str = Field(alias="refreshToken")


class FeedFeedSiteGoogleDrive(BaseModel):
    folder_id: Optional[str] = Field(alias="folderId")
    refresh_token: str = Field(alias="refreshToken")


class FeedFeedEmail(BaseModel):
    type: FeedServiceTypes
    include_attachments: Optional[bool] = Field(alias="includeAttachments")
    google: Optional["FeedFeedEmailGoogle"]
    microsoft: Optional["FeedFeedEmailMicrosoft"]


class FeedFeedEmailGoogle(BaseModel):
    type: Optional[EmailListingTypes]
    refresh_token: Optional[str] = Field(alias="refreshToken")


class FeedFeedEmailMicrosoft(BaseModel):
    type: Optional[EmailListingTypes]
    tenant_id: Optional[str] = Field(alias="tenantId")
    refresh_token: Optional[str] = Field(alias="refreshToken")


class FeedFeedIssue(BaseModel):
    type: FeedServiceTypes
    include_attachments: Optional[bool] = Field(alias="includeAttachments")
    jira: Optional["FeedFeedIssueJira"]
    linear: Optional["FeedFeedIssueLinear"]
    github: Optional["FeedFeedIssueGithub"]


class FeedFeedIssueJira(BaseModel):
    uri: Any
    project: str
    email: str
    token: str


class FeedFeedIssueLinear(BaseModel):
    key: str
    project: str


class FeedFeedIssueGithub(BaseModel):
    uri: Optional[Any]
    repository_owner: str = Field(alias="repositoryOwner")
    repository_name: str = Field(alias="repositoryName")
    refresh_token: Optional[str] = Field(alias="refreshToken")
    personal_access_token: Optional[str] = Field(alias="personalAccessToken")


class FeedFeedRss(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    uri: Any


class FeedFeedWeb(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    uri: Any
    include_files: Optional[bool] = Field(alias="includeFiles")


class FeedFeedReddit(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    subreddit_name: str = Field(alias="subredditName")


class FeedFeedNotion(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    token: str
    identifiers: List[str]
    type: NotionTypes


class FeedFeedYoutube(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    type: YouTubeTypes
    video_name: Optional[str] = Field(alias="videoName")
    video_identifiers: Optional[List[str]] = Field(alias="videoIdentifiers")
    channel_identifier: Optional[str] = Field(alias="channelIdentifier")
    playlist_identifier: Optional[str] = Field(alias="playlistIdentifier")


class FeedFeedSlack(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    type: Optional[FeedListingTypes]
    token: str
    channel: str
    include_attachments: Optional[bool] = Field(alias="includeAttachments")


class FeedFeedDiscord(BaseModel):
    read_limit: Optional[int] = Field(alias="readLimit")
    type: Optional[FeedListingTypes]
    token: str
    channel: str
    include_attachments: Optional[bool] = Field(alias="includeAttachments")


class FeedFeedWorkflow(BaseModel):
    id: str
    name: str


class FeedFeedSchedulePolicy(BaseModel):
    recurrence_type: Optional[TimedPolicyRecurrenceTypes] = Field(
        alias="recurrenceType"
    )
    repeat_interval: Optional[Any] = Field(alias="repeatInterval")


Feed.model_rebuild()
FeedFeed.model_rebuild()
FeedFeedSite.model_rebuild()
FeedFeedEmail.model_rebuild()
FeedFeedIssue.model_rebuild()
