{%- set ecr_repos=[] -%}
{%- for fqn, model in models.items() -%}
    {%- if model.model_server.value.startswith('sagemaker') -%}
        {%- if fqn not in ecr_repos -%}
            {%- set _ = ecr_repos.append(fqn) -%}
        {%- endif %}
    {%- endif %}
{%- endfor -%}
# This file is generated by Raptor's LabSDK. Do not edit it directly.
# Generated at {{ now() }}
#
# Makefile utility for deploy Raptor artifacts to Kubernetes

MODEL_IMAGE_REPO_URI?=localhost
DOCKER_DEFAULT_PLATFORM?=linux/amd64
.DEFAULT_GOAL:=help

##@ General

.PHONY: help
help: _print_banner ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.PHONY: _print_banner
_print_banner:
	@printf '%b\n' "\033[38;5;97m                    █▀"
	@printf '%b\n' "\033[38;5;97m                  █▀  █▀"
	@printf '%b\n' "\033[38;5;97m▄               ██▀ ▄█▀  ▄"
	@printf '%b\n' "\033[38;5;97m █▄▄           ██▀ ▄█▀ ▄█▀"
	@printf '%b\n' "\033[38;5;97m   ▀▀██████████▄ █ ▄▄█▀"
	@printf '%b\n' "\033[38;5;97m    █▄        ███ █▀                                 ▄"
	@printf '%b\n' "\033[38;5;97m    ███      ███ ▀                                ▂▄██"
	@printf '%b\n' "\033[38;5;97m    ███     ████     ▄██▀▀▀████   ██ ▄█▀▀▀▀█▄    ▀███▀▀▀▀   ▄███▀▀▀███▄   █ ▄█▀▀▀▀"
	@printf '%b\n' "\033[38;5;97m    ███████████▎   ▄██▀     ▀██   ██▀      ▀██▄   ███      ███       ██▌  ██▀"
	@printf '%b\n' "\033[38;5;97m    ███     ▀███   ██▌      ▄██   ██▌       ██▀   ██       ██        ██   ██"
	@printf '%b\n' "\033[38;5;97m    ███      ▐██▄  ▀██▄   ▄▀███   ███     ▄██▀    ███       ███     ██    █▌"
	@printf '%b\n' "\033[38;5;97m    ███       ███▄   ▀▀██▀▀  ██   ███▀▀▀▀▀▀       ▀███▀       ▀████▀      █"
	@printf '%b\n' "\033[38;5;97m                                  ██▌"
	@printf '%b\n' "\033[38;5;97m                                  █▀"
	@printf '%b\n' "\033[0m"


##@ Helpers

.PHONY: show-envs
show-envs: _print_banner ## Show all environment variables that are available for configuring the generated YAML manifests
	@printf '%b\n' "The generated YAML manifests are configured using environment variables."
	@printf '%b\n' "You should set them before running the make commands."
	@printf '%b\n' ""
	@printf '%b\n' "\033[31mAvailable environment variables:\033[0m"
	@printf '%b\n' "\033[36mDOCKER_DEFAULT_PLATFORM\033[0m: Platform to use when building docker images. Default: linux/amd64"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m{% raw %}${DOCKER_DEFAULT_PLATFORM}{% endraw %}\033[0m"
	{% for env, desc in envs.items() %}
	@printf '%b\n' "\033[36m{{env}}\033[0m: {{desc}}"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m{% raw %}${{% endraw %}{{env}}{% raw %}}{% endraw %}\033[0m"
	{%- endfor %}


##@ All

.PHONY: all
all: _print_banner docker-build-models docker-push-models deploy ## Build docker images for all models, push them to the docker repository and deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"

deploy: _print_banner deploy-dsrcs deploy-features deploy-models ## Deploy all data-sources, features and models to Kubernetes
	@echo "Models and features deployed successfully"

{% if ecr_repos|length > 0 -%}
all-ecr: _print_banner docker-build-models create-model-ecr-repos docker-ecr-push-models deploy-ecr ## Build docker images for all models, create ECR repos if not exists, push the images to the docker repository and deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"

.PHONY: deploy-ecr
deploy-ecr: _print_banner deploy-dsrcs deploy-features deploy-ecr-models ## Deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"
{%- endif %}

##@ Data Sources

.PHONY: deploy-dsrcs
deploy-dsrcs: _print_banner {%for fqn in sources.keys()%}deploy-dsrc-{{fqn|targetize}} {%endfor%} ## Deploy all data-sources to Kubernetes
	@echo "Data sources deployed successfully"

{% for fqn, dsrc in sources.items() %}
.PHONY: deploy-dsrc-{{fqn|targetize}}
deploy-dsrc-{{fqn|targetize}}: _print_banner ## Deploy {{fqn}} to Kubernetes
	@echo " → {{fqn}}: Deploying..."
	envsubst < {{dsrc.manifest_filename()}} | kubectl apply -f -
	@echo "     → {{fqn}}: Deployed successfully"
{% endfor %}


##@ Features

.PHONY: deploy-features
deploy-features: _print_banner {%for fqn in features.keys()%}deploy-feat-{{fqn|targetize}} {%endfor%} ## Deploy all features to Kubernetes
	@echo "Features deployed successfully"

{% for fqn, feat in features.items() %}
.PHONY: deploy-feat-{{fqn|targetize}}
deploy-feat-{{fqn|targetize}}: _print_banner ## Deploy {{fqn}} to Kubernetes
	@echo " → {{fqn}}: Deploying..."
	envsubst < {{feat.manifest_filename()}} | kubectl apply -f -
	@echo "     → {{fqn}}: Deployed successfully"
{% endfor %}


##@ Models (All)

.PHONY: deploy-models
deploy-models: _print_banner {%for fqn in models.keys()%}deploy-model-{{fqn|targetize}} {%endfor%} ## Deploy all models to Kubernetes
	@echo "Models deployed successfully"

.PHONY: docker-build
docker-build-models: _print_banner {%for fqn in models.keys()%}docker-build-model-{{fqn|targetize}} {%endfor%} ## Build docker images for all models
	@echo "Docker images built successfully"

.PHONY: docker-push-models
docker-push-models: _print_banner {%for fqn in models.keys()%}docker-push-model-{{fqn|targetize}} {%endfor%} ## Push docker images for all models
	@echo "Docker images pushed successfully"

{%- if ecr_repos|length > 0 %}
.PHONY: create-model-ecr-repos
create-model-ecr-repos: _print_banner {%for fqn in ecr_repos%}create-model-ecr-repo-{{fqn|targetize}} {%endfor%} ## Create ECR repositories for all models if they don't exist
	@echo "ECR repositories created successfully"

.PHONY: docker-ecr-push-models
docker-ecr-push-models: _print_banner {%for fqn in ecr_repos%}docker-ecr-push-model-{{fqn|targetize}} {%endfor%} ## Push docker images for all models to ECR
	@echo "Docker images pushed successfully"

.PHONY: deploy-ecr-models
deploy-ecr-models: _print_banner {%for fqn in ecr_repos%}deploy-ecr-model-{{fqn|targetize}} {%endfor%} ## Deploy all models to Kubernetes
	@echo "Models deployed successfully"

{%- endif %}

##@ Models

{%- for fqn, model in models.items() -%}

{%- if model.model_server.value.startswith('sagemaker') %}
{%- macro set_ecr(fqn) -%}
export MODEL_IMAGE_REPO_URI := $(shell aws ecr describe-repositories --repository-names {{fqn}} --query 'repositories[0].repositoryUri' --output text --no-cli-pager)
{%- endmacro -%}
.PHONY: create-model-ecr-repo-{{fqn|targetize}}
create-model-ecr-repo-{{fqn|targetize}}: _print_banner ## Create ECR repository for {{fqn}} if it doesn't exist
	@echo " → default.diabetes_prediction: Creating ECR repository:"
	aws ecr describe-repositories --repository-names {{fqn}}  --query 'repositories[0].repositoryUri' --output text --no-cli-pager || aws ecr create-repository --repository-name "{{fqn}}" --query 'repository.repositoryUri' --output text --no-cli-pager
	@echo "     → {{fqn}}: ECR repository created successfully"

.PHONY: docker-push-model-to-ecr-{{fqn|targetize}}
docker-ecr-push-model-{{fqn|targetize}}: {{set_ecr(fqn)}}
docker-ecr-push-model-{{fqn|targetize}}: _print_banner docker-push-model-{{fqn|targetize}} ## Push docker image for {{fqn}} to ECR

.PHONY: deploy-ecr-model-{{fqn|targetize}}
deploy-ecr-model-{{fqn|targetize}}: {{set_ecr(fqn)}}
deploy-ecr-model-{{fqn|targetize}}: _print_banner deploy-model-{{fqn|targetize}} ## Deploy {{fqn}} to ECR
{%- endif -%}

.PHONY: docker-build-model-{{fqn|targetize}}
docker-build-model-{{fqn|targetize}}: _print_banner ## Build docker image for {{fqn}}
	@echo " → {{fqn}}: Building Docker image:"
	cd models/{{fqn}} && docker build --platform {% raw %}${DOCKER_DEFAULT_PLATFORM}{% endraw %} -t {{fqn}}:{{model._model_tag}} -f env/docker/Dockerfile .
	@echo "     → {{fqn}}: Docker image built successfully"

.PHONY: docker-push-model-{{fqn|targetize}}
docker-push-model-{{fqn|targetize}}: _print_banner ## Push {{fqn}} docker image
	@echo " → {{fqn}}: Pushing Docker image:"
	docker tag {{fqn}}:{{model._model_tag}} ${MODEL_IMAGE_REPO_URI}:{{model._model_tag}}
	docker push ${MODEL_IMAGE_REPO_URI}:{{model._model_tag}}
	@echo "     → {{fqn}}: Docker image pushed successfully"

.PHONY: deploy-model-{{fqn|targetize}}
deploy-model-{{fqn|targetize}}: _print_banner ## Deploy {{fqn}} to Kubernetes
	@echo " → {{fqn}}: Deploying:"
	envsubst < {{model.manifest_filename()}} | kubectl apply -f -
	@echo "     → {{fqn}}: Deployed successfully"
{% endfor %}
