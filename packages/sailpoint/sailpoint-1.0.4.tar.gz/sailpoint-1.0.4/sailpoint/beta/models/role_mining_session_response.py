# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from sailpoint.beta.models.role_mining_role_type import RoleMiningRoleType
from sailpoint.beta.models.role_mining_session_scope import RoleMiningSessionScope
from sailpoint.beta.models.role_mining_session_status import RoleMiningSessionStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RoleMiningSessionResponse(BaseModel):
    """
    RoleMiningSessionResponse
    """ # noqa: E501
    scope: Optional[RoleMiningSessionScope] = None
    min_num_identities_in_potential_role: Optional[StrictInt] = Field(default=None, description="Minimum number of identities in a potential role", alias="minNumIdentitiesInPotentialRole")
    prescribed_prune_threshold: Optional[StrictInt] = Field(default=None, description="The computed (or prescribed) prune threshold for this session", alias="prescribedPruneThreshold")
    prune_threshold: Optional[StrictInt] = Field(default=None, description="The prune threshold to be used for this role mining session", alias="pruneThreshold")
    potential_role_count: Optional[StrictInt] = Field(default=None, description="The number of potential roles", alias="potentialRoleCount")
    potential_roles_ready_count: Optional[StrictInt] = Field(default=None, description="The number of potential roles which have completed processing", alias="potentialRolesReadyCount")
    status: Optional[RoleMiningSessionStatus] = None
    id: Optional[StrictStr] = Field(default=None, description="Session Id for this role mining session")
    created_date: Optional[datetime] = Field(default=None, description="The date-time when this role mining session was created.", alias="createdDate")
    modified_date: Optional[datetime] = Field(default=None, description="The date-time when this role mining session was completed.", alias="modifiedDate")
    type: Optional[RoleMiningRoleType] = None
    __properties: ClassVar[List[str]] = ["scope", "minNumIdentitiesInPotentialRole", "prescribedPruneThreshold", "pruneThreshold", "potentialRoleCount", "potentialRolesReadyCount", "status", "id", "createdDate", "modifiedDate", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RoleMiningSessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RoleMiningSessionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": RoleMiningSessionScope.from_dict(obj.get("scope")) if obj.get("scope") is not None else None,
            "minNumIdentitiesInPotentialRole": obj.get("minNumIdentitiesInPotentialRole"),
            "prescribedPruneThreshold": obj.get("prescribedPruneThreshold"),
            "pruneThreshold": obj.get("pruneThreshold"),
            "potentialRoleCount": obj.get("potentialRoleCount"),
            "potentialRolesReadyCount": obj.get("potentialRolesReadyCount"),
            "status": RoleMiningSessionStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "id": obj.get("id"),
            "createdDate": obj.get("createdDate"),
            "modifiedDate": obj.get("modifiedDate"),
            "type": obj.get("type")
        })
        return _obj


