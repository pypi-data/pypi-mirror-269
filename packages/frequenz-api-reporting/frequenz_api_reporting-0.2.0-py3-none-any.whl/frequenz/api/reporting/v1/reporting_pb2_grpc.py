# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frequenz.api.reporting.v1 import reporting_pb2 as frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2


class ReportingStub(object):
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListMicrogridComponentsData = channel.unary_unary(
                '/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData',
                request_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.FromString,
                )
        self.ReceiveMicrogridComponentsDataStream = channel.unary_stream(
                '/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream',
                request_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.FromString,
                )
        self.ListAggregatedMicrogridComponentsData = channel.unary_unary(
                '/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData',
                request_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.FromString,
                )
        self.ReceiveAggregatedMicrogridComponentsDataStream = channel.unary_stream(
                '/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream',
                request_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.FromString,
                )


class ReportingServicer(object):
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.

    """

    def ListMicrogridComponentsData(self, request, context):
        """Fetches historical metrics for a list of microgrid components.

        !!! note
        This RPC endpoint retrieves historical metrics data for components of one or more
        microgrids. Clients need to provide at least one microgrid ID and one component ID
        to get a result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMicrogridComponentsDataStream(self, request, context):
        """Streams metrics for a list of microgrid components.

        !!! note
        This RPC endpoint streams metrics data for components of one or more microgrids.
        Clients need to provide at least one microgrid ID and one component ID
        to get a result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAggregatedMicrogridComponentsData(self, request, context):
        """Fetches aggregated historical metrics based on user-defined formulas for a list of
        microgrid components.

        !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid components. At least one formula must be provided for a valid query.
        Formulas are provided on a per-microgrid basis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveAggregatedMicrogridComponentsDataStream(self, request, context):
        """Streams aggregated metrics based on user-defined formulas for a list of microgrid
        components.

        !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid components. At least one formula for one microgrid must be provided
        for a valid result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReportingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListMicrogridComponentsData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMicrogridComponentsData,
                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.SerializeToString,
            ),
            'ReceiveMicrogridComponentsDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMicrogridComponentsDataStream,
                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.SerializeToString,
            ),
            'ListAggregatedMicrogridComponentsData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAggregatedMicrogridComponentsData,
                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.SerializeToString,
            ),
            'ReceiveAggregatedMicrogridComponentsDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveAggregatedMicrogridComponentsDataStream,
                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frequenz.api.reporting.v1.Reporting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reporting(object):
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.

    """

    @staticmethod
    def ListMicrogridComponentsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData',
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.SerializeToString,
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMicrogridComponentsDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream',
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.SerializeToString,
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAggregatedMicrogridComponentsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData',
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.SerializeToString,
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveAggregatedMicrogridComponentsDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream',
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.SerializeToString,
            frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
