# Copyright (c) 2024 Sinaptik GmbH
from typing import Any, Callable
from .code_execution_engine import CodeExecutionEngine
from pandasai.pipelines.chat.code_execution import CodeExecutionContext
from pandasai.pipelines.chat.code_execution import CodeExecution


class EnhancedCodeExecution(CodeExecution):
    """
    EnhancedCodeExecution return results of plot dicionary and other error handling in code execution
    """

    def __init__(
        self,
        on_failure: Callable[[str, Exception], None] = None,
        on_retry: Callable[[str, Exception], None] = None,
        last_code_executed: Callable[[str, Exception], None] = None,
        **kwargs,
    ):
        super().__init__(**kwargs)
        self.on_failure = on_failure
        self.on_retry = on_retry
        self.last_code_executed = last_code_executed

    def execute_code(self, code: str, context: CodeExecutionContext) -> Any:
        """
        Execute the python code generated by LLMs to answer the question
        about the input dataframe. Run the code in the current context and return the
        result.

        Args:
            code (str): Python code to execute.
            context (CodeExecutionContext): Code Execution Context
                    with prompt id and skills.

        Returns:
            Any: The result of the code execution. The type of the result depends
                on the generated code.

        """
        dfs = self._required_dfs(code)

        code_executor = CodeExecutionEngine(code, self._additional_dependencies)
        code_executor.add_to_env("dfs", self._get_originals(dfs))

        # Add sql execution function for sql queries
        if self._config.direct_sql:
            code_executor.add_to_env(
                "execute_sql_query", self._dfs[0].execute_direct_sql_query
            )

        # Add skills to the env
        if context.skills_manager.used_skills:
            for skill_func_name in context.skills_manager.used_skills:
                skill = context.skills_manager.get_skill_by_func_name(skill_func_name)
                code_executor.add_to_env(skill_func_name, skill)

        # Execute the code
        return code_executor.execute(code)
