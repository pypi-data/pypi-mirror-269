"""Provide the RedditBase class."""

from __future__ import annotations

from typing import TYPE_CHECKING, Any

from asyncpraw.models.base import AsyncPRAWBase

if TYPE_CHECKING:  # pragma: no cover
    import asyncpraw

class RedditBase(AsyncPRAWBase):
    @staticmethod
    def _url_parts(url: str) -> list[str]: ...
    def __eq__(self, other: Any | str) -> bool: ...
    def __getattr__(self, attribute: str) -> Any: ...
    def __hash__(self) -> int: ...
    def __init__(
        self,
        reddit: asyncpraw.Reddit,
        _data: dict[str, Any] | None,
        _extra_attribute_to_check: str | None = None,
        _fetched: bool = False,
        _str_field: bool = True,
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    async def _fetch(self) -> None: ...
    async def _fetch_data(self) -> None: ...
    def _reset_attributes(self, *attributes: str) -> None: ...
    async def load(self) -> None: ...
