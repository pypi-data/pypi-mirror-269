from __future__ import annotations

from typing import Any, Union

class AsyncPRAWException(Exception): ...

PRAWException = AsyncPRAWException

class ExceptionWrapper:
    def __getattr__(self, attribute: str) -> Any: ...
    def __init__(self, wrapped: Any) -> None: ...

class RedditErrorItem:
    error_type: str
    message: Union[str, None]
    field: Union[str, None]

    @property
    def error_message(self) -> str: ...
    def __eq__(self, other: Union["RedditErrorItem", list[str], object]) -> bool: ...
    def __init__(
        self,
        error_type: str,
        *,
        field: Union[str, None] = None,
        message: Union[str, None] = None,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class ClientException(AsyncPRAWException): ...

class DuplicateReplaceException(ClientException):
    def __init__(self) -> None: ...

class InvalidFlairTemplateID(ClientException):
    def __init__(self, template_id: str) -> None: ...

class InvalidImplicitAuth(ClientException):
    def __init__(self) -> None: ...

class InvalidURL(ClientException):
    def __init__(self, url: str, *, message: str = "Invalid URL: {}") -> None: ...

class MissingRequiredAttributeException(ClientException): ...
class ReadOnlyException(ClientException): ...

class TooLargeMediaException(ClientException):
    actual: int
    maximum_size: int

    def __init__(self, *, actual: int, maximum_size: int) -> None: ...

class WebSocketException(ClientException):
    _original_exception: Exception

    @property
    def original_exception(self) -> Exception: ...
    @original_exception.setter
    def original_exception(self, value: Exception) -> None: ...
    @original_exception.deleter
    def original_exception(self) -> None: ...
    def __init__(self, message: str, exception: Exception | None) -> None: ...

class MediaPostFailed(WebSocketException):
    def __init__(self) -> None: ...

class APIException(AsyncPRAWException):
    items: list[RedditErrorItem]

    @staticmethod
    def parse_exception_list(exceptions: list[Union[RedditErrorItem, list[str]]]) -> list[RedditErrorItem]: ...
    @property
    def error_type(self) -> str: ...
    @property
    def field(self) -> str: ...
    @property
    def message(self) -> str: ...
    def __init__(self, items: Union[list[Union[RedditErrorItem, list[str]]], str], *optional_args: str) -> None: ...
    def _get_old_attr(self, attrname: str) -> Any: ...

class RedditAPIException(APIException): ...
