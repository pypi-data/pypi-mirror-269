[build-system]
requires = [
  "setuptools >= 63.0.0", # required by pyproject+setuptools_scm integration
  "setuptools_scm[toml] >= 7.0.5", # required for "no-local-version" scheme

]
build-backend = "setuptools.build_meta"

[project]
# https://peps.python.org/pep-0621/#readme
requires-python = ">=3.10"
dynamic = ["version", "dependencies", "optional-dependencies"]
name = "pytest-ansible"
description = "Plugin for pytest to simplify calling ansible modules from tests or fixtures"
readme = "README.md"
authors = [{ "name" = "Ansible by Red Hat", "email" = "info@ansible.com" }]
maintainers = [{ "name" = "Ansible by Red Hat", "email" = "info@ansible.com" }]
license = { text = "MIT" }
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  'Topic :: Software Development :: Testing',
  'Topic :: Software Development :: Quality Assurance',
  'Topic :: Utilities',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
]
keywords = ["ansible", "testing", "pytest"]

[project.entry-points.pytest11]
pytest-ansible = 'pytest_ansible.plugin'

[project.urls]
homepage = "https://github.com/ansible/pytest-ansible"
documentation = "https://github.com/ansible/pytest-ansible"
repository = "https://github.com/ansible/pytest-ansible"
changelog = "https://github.com/ansible/pytest-ansible/releases"

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
# Increase it just so it would pass on any single-python run
fail_under = 60
skip_covered = true
skip_empty = true
# During development we might remove code (files) with coverage data, and we dont want to fail:
ignore_errors = true
show_missing = true

[tool.coverage.run]
# branch = true
concurrency = ["multiprocessing", "thread"]
data_file = ".tox/.coverage"
parallel = true
source = ["pytest_ansible"]

[tool.mypy]
python_version = 3.10
ignore_missing_imports = true
ignore_errors = true
strict = true
color_output = true
error_summary = true
# Temporary disabled until we fix them:
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_any_generics = false
disable_error_code = ["var-annotated", "attr-defined"]

[[tool.mypy.overrides]]
module = ["ansible.*"]
ignore_missing_imports = true
ignore_errors = true

[tool.pydoclint]
allow-init-docstring = true
arg-type-hints-in-docstring = false
check-return-types = false
style = 'google'

[tool.pylint.MAIN]
extension-pkg-allow-list = ["black.parsing"]

[tool.pylint.IMPORTS]
preferred-modules = ["py:pathlib", "unittest:pytest"]

[tool.pylint."MESSAGES CONTROL"]
# increase from default is 50 which is too aggressive
max-statements = 60
disable = [
  # On purpose disabled as we rely on black
  "line-too-long",
  # https://github.com/PyCQA/pylint/issues/850
  "cyclic-import",
  # https://github.com/PyCQA/pylint/issues/8453
  "preferred-module",
  # Temporarily disabled until we fix them:
  "duplicate-code",
  "import-error",
  "import-outside-toplevel",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-name-in-module",
  "protected-access",
  "redefined-outer-name",
  "too-many-branches",
  "too-many-locals",
  "too-many-statements",
  "unexpected-keyword-arg",
  "unused-argument",
  "invalid-name",
  "too-few-public-methods",
]

[tool.pytest.ini_options]
minversion = 6.0
addopts = ["--tb=native"]
markers = ["old", "unit", "requires_ansible_v2"]

[tool.ruff]
select = ["ALL"]
ignore = [
  "E501", # we use black
  "D203", # incompatible with D211
  "D213", # incompatible with D212
  # temporary disabled until we fix them:
  "ANN",
  "ARG",
  "B",
  "C",
  "EM",
  "FBT",
  "INP",
  "ISC",
  "PGH",
  "PIE",
  "PLC",
  "PLR",
  "PLW",
  "RUF",
  "S",
  "SLF",
  "T",
  "TRY",
]
target-version = "py310"
# Same as Black.
line-length = 88

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.per-file-ignores]
"tests/**" = ["S101", "D"]

[tool.ruff.isort]
known-first-party = ["pytest_ansible"]
lines-after-imports = 2 # Ensures consistency for cases when there's variable vs function/class definitions after imports
lines-between-types = 1 # Separate import/from with 1 line

[tool.setuptools.dynamic]
optional-dependencies.docs = { file = [".config/requirements-docs.in"] }
optional-dependencies.test = { file = [".config/requirements-test.in"] }
dependencies = { file = [".config/requirements.in"] }

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/pytest_ansible/_version.py"
