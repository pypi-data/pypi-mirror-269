# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 argocd: pulumi.Input['InstanceArgocdArgs'],
                 application_set_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_ssh_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_rbac_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_ssh_known_hosts_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_tls_certs_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_management_plugins: Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 repo_template_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input['InstanceArgocdArgs'] argocd: Argo CD instance configuration
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] application_set_secret: stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
               ApplicationSet's pull request generator, see
               [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
               In this example, `tokenRef.secretName` would be application-set-secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_cm: is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_config: configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_secret: contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_ssh_config: contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
               ConfigMap of Argo CD, for available options and examples, refer to [this
               documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_cm: configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
               details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_secret: contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
               CD, for more details and examples, refer to [this
               documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_rbac_cm: is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_secret: is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_ssh_known_hosts_cm: is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_tls_certs_cm: is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]] config_management_plugins: is a map of [Config Management
               Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
               the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        :param pulumi.Input[str] name: Instance name
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_credential_secrets: is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
               options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_template_credential_secrets: is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
               the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        pulumi.set(__self__, "argocd", argocd)
        if application_set_secret is not None:
            pulumi.set(__self__, "application_set_secret", application_set_secret)
        if argocd_cm is not None:
            pulumi.set(__self__, "argocd_cm", argocd_cm)
        if argocd_image_updater_config is not None:
            pulumi.set(__self__, "argocd_image_updater_config", argocd_image_updater_config)
        if argocd_image_updater_secret is not None:
            pulumi.set(__self__, "argocd_image_updater_secret", argocd_image_updater_secret)
        if argocd_image_updater_ssh_config is not None:
            pulumi.set(__self__, "argocd_image_updater_ssh_config", argocd_image_updater_ssh_config)
        if argocd_notifications_cm is not None:
            pulumi.set(__self__, "argocd_notifications_cm", argocd_notifications_cm)
        if argocd_notifications_secret is not None:
            pulumi.set(__self__, "argocd_notifications_secret", argocd_notifications_secret)
        if argocd_rbac_cm is not None:
            pulumi.set(__self__, "argocd_rbac_cm", argocd_rbac_cm)
        if argocd_secret is not None:
            pulumi.set(__self__, "argocd_secret", argocd_secret)
        if argocd_ssh_known_hosts_cm is not None:
            pulumi.set(__self__, "argocd_ssh_known_hosts_cm", argocd_ssh_known_hosts_cm)
        if argocd_tls_certs_cm is not None:
            pulumi.set(__self__, "argocd_tls_certs_cm", argocd_tls_certs_cm)
        if config_management_plugins is not None:
            pulumi.set(__self__, "config_management_plugins", config_management_plugins)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo_credential_secrets is not None:
            pulumi.set(__self__, "repo_credential_secrets", repo_credential_secrets)
        if repo_template_credential_secrets is not None:
            pulumi.set(__self__, "repo_template_credential_secrets", repo_template_credential_secrets)

    @property
    @pulumi.getter
    def argocd(self) -> pulumi.Input['InstanceArgocdArgs']:
        """
        Argo CD instance configuration
        """
        return pulumi.get(self, "argocd")

    @argocd.setter
    def argocd(self, value: pulumi.Input['InstanceArgocdArgs']):
        pulumi.set(self, "argocd", value)

    @property
    @pulumi.getter(name="applicationSetSecret")
    def application_set_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
        ApplicationSet's pull request generator, see
        [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
        In this example, `tokenRef.secretName` would be application-set-secret.
        """
        return pulumi.get(self, "application_set_secret")

    @application_set_secret.setter
    def application_set_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "application_set_secret", value)

    @property
    @pulumi.getter(name="argocdCm")
    def argocd_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        """
        return pulumi.get(self, "argocd_cm")

    @argocd_cm.setter
    def argocd_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_cm", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterConfig")
    def argocd_image_updater_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_config")

    @argocd_image_updater_config.setter
    def argocd_image_updater_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_config", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterSecret")
    def argocd_image_updater_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_secret")

    @argocd_image_updater_secret.setter
    def argocd_image_updater_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_secret", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterSshConfig")
    def argocd_image_updater_ssh_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
        ConfigMap of Argo CD, for available options and examples, refer to [this
        documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_ssh_config")

    @argocd_image_updater_ssh_config.setter
    def argocd_image_updater_ssh_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_ssh_config", value)

    @property
    @pulumi.getter(name="argocdNotificationsCm")
    def argocd_notifications_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
        details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_notifications_cm")

    @argocd_notifications_cm.setter
    def argocd_notifications_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_notifications_cm", value)

    @property
    @pulumi.getter(name="argocdNotificationsSecret")
    def argocd_notifications_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
        CD, for more details and examples, refer to [this
        documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        """
        return pulumi.get(self, "argocd_notifications_secret")

    @argocd_notifications_secret.setter
    def argocd_notifications_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_notifications_secret", value)

    @property
    @pulumi.getter(name="argocdRbacCm")
    def argocd_rbac_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        """
        return pulumi.get(self, "argocd_rbac_cm")

    @argocd_rbac_cm.setter
    def argocd_rbac_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_rbac_cm", value)

    @property
    @pulumi.getter(name="argocdSecret")
    def argocd_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        """
        return pulumi.get(self, "argocd_secret")

    @argocd_secret.setter
    def argocd_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_secret", value)

    @property
    @pulumi.getter(name="argocdSshKnownHostsCm")
    def argocd_ssh_known_hosts_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        """
        return pulumi.get(self, "argocd_ssh_known_hosts_cm")

    @argocd_ssh_known_hosts_cm.setter
    def argocd_ssh_known_hosts_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_ssh_known_hosts_cm", value)

    @property
    @pulumi.getter(name="argocdTlsCertsCm")
    def argocd_tls_certs_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        """
        return pulumi.get(self, "argocd_tls_certs_cm")

    @argocd_tls_certs_cm.setter
    def argocd_tls_certs_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_tls_certs_cm", value)

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]]:
        """
        is a map of [Config Management
        Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
        the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        """
        return pulumi.get(self, "config_management_plugins")

    @config_management_plugins.setter
    def config_management_plugins(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]]):
        pulumi.set(self, "config_management_plugins", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="repoCredentialSecrets")
    def repo_credential_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
        options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        """
        return pulumi.get(self, "repo_credential_secrets")

    @repo_credential_secrets.setter
    def repo_credential_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "repo_credential_secrets", value)

    @property
    @pulumi.getter(name="repoTemplateCredentialSecrets")
    def repo_template_credential_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
        the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        return pulumi.get(self, "repo_template_credential_secrets")

    @repo_template_credential_secrets.setter
    def repo_template_credential_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "repo_template_credential_secrets", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 application_set_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd: Optional[pulumi.Input['InstanceArgocdArgs']] = None,
                 argocd_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_ssh_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_rbac_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_ssh_known_hosts_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_tls_certs_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_management_plugins: Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 repo_template_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] application_set_secret: stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
               ApplicationSet's pull request generator, see
               [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
               In this example, `tokenRef.secretName` would be application-set-secret.
        :param pulumi.Input['InstanceArgocdArgs'] argocd: Argo CD instance configuration
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_cm: is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_config: configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_secret: contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_ssh_config: contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
               ConfigMap of Argo CD, for available options and examples, refer to [this
               documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_cm: configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
               details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_secret: contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
               CD, for more details and examples, refer to [this
               documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_rbac_cm: is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_secret: is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_ssh_known_hosts_cm: is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_tls_certs_cm: is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]] config_management_plugins: is a map of [Config Management
               Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
               the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        :param pulumi.Input[str] name: Instance name
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_credential_secrets: is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
               options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_template_credential_secrets: is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
               the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        if application_set_secret is not None:
            pulumi.set(__self__, "application_set_secret", application_set_secret)
        if argocd is not None:
            pulumi.set(__self__, "argocd", argocd)
        if argocd_cm is not None:
            pulumi.set(__self__, "argocd_cm", argocd_cm)
        if argocd_image_updater_config is not None:
            pulumi.set(__self__, "argocd_image_updater_config", argocd_image_updater_config)
        if argocd_image_updater_secret is not None:
            pulumi.set(__self__, "argocd_image_updater_secret", argocd_image_updater_secret)
        if argocd_image_updater_ssh_config is not None:
            pulumi.set(__self__, "argocd_image_updater_ssh_config", argocd_image_updater_ssh_config)
        if argocd_notifications_cm is not None:
            pulumi.set(__self__, "argocd_notifications_cm", argocd_notifications_cm)
        if argocd_notifications_secret is not None:
            pulumi.set(__self__, "argocd_notifications_secret", argocd_notifications_secret)
        if argocd_rbac_cm is not None:
            pulumi.set(__self__, "argocd_rbac_cm", argocd_rbac_cm)
        if argocd_secret is not None:
            pulumi.set(__self__, "argocd_secret", argocd_secret)
        if argocd_ssh_known_hosts_cm is not None:
            pulumi.set(__self__, "argocd_ssh_known_hosts_cm", argocd_ssh_known_hosts_cm)
        if argocd_tls_certs_cm is not None:
            pulumi.set(__self__, "argocd_tls_certs_cm", argocd_tls_certs_cm)
        if config_management_plugins is not None:
            pulumi.set(__self__, "config_management_plugins", config_management_plugins)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo_credential_secrets is not None:
            pulumi.set(__self__, "repo_credential_secrets", repo_credential_secrets)
        if repo_template_credential_secrets is not None:
            pulumi.set(__self__, "repo_template_credential_secrets", repo_template_credential_secrets)

    @property
    @pulumi.getter(name="applicationSetSecret")
    def application_set_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
        ApplicationSet's pull request generator, see
        [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
        In this example, `tokenRef.secretName` would be application-set-secret.
        """
        return pulumi.get(self, "application_set_secret")

    @application_set_secret.setter
    def application_set_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "application_set_secret", value)

    @property
    @pulumi.getter
    def argocd(self) -> Optional[pulumi.Input['InstanceArgocdArgs']]:
        """
        Argo CD instance configuration
        """
        return pulumi.get(self, "argocd")

    @argocd.setter
    def argocd(self, value: Optional[pulumi.Input['InstanceArgocdArgs']]):
        pulumi.set(self, "argocd", value)

    @property
    @pulumi.getter(name="argocdCm")
    def argocd_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        """
        return pulumi.get(self, "argocd_cm")

    @argocd_cm.setter
    def argocd_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_cm", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterConfig")
    def argocd_image_updater_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_config")

    @argocd_image_updater_config.setter
    def argocd_image_updater_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_config", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterSecret")
    def argocd_image_updater_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_secret")

    @argocd_image_updater_secret.setter
    def argocd_image_updater_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_secret", value)

    @property
    @pulumi.getter(name="argocdImageUpdaterSshConfig")
    def argocd_image_updater_ssh_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
        ConfigMap of Argo CD, for available options and examples, refer to [this
        documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_ssh_config")

    @argocd_image_updater_ssh_config.setter
    def argocd_image_updater_ssh_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_image_updater_ssh_config", value)

    @property
    @pulumi.getter(name="argocdNotificationsCm")
    def argocd_notifications_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
        details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_notifications_cm")

    @argocd_notifications_cm.setter
    def argocd_notifications_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_notifications_cm", value)

    @property
    @pulumi.getter(name="argocdNotificationsSecret")
    def argocd_notifications_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
        CD, for more details and examples, refer to [this
        documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        """
        return pulumi.get(self, "argocd_notifications_secret")

    @argocd_notifications_secret.setter
    def argocd_notifications_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_notifications_secret", value)

    @property
    @pulumi.getter(name="argocdRbacCm")
    def argocd_rbac_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        """
        return pulumi.get(self, "argocd_rbac_cm")

    @argocd_rbac_cm.setter
    def argocd_rbac_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_rbac_cm", value)

    @property
    @pulumi.getter(name="argocdSecret")
    def argocd_secret(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        """
        return pulumi.get(self, "argocd_secret")

    @argocd_secret.setter
    def argocd_secret(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_secret", value)

    @property
    @pulumi.getter(name="argocdSshKnownHostsCm")
    def argocd_ssh_known_hosts_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        """
        return pulumi.get(self, "argocd_ssh_known_hosts_cm")

    @argocd_ssh_known_hosts_cm.setter
    def argocd_ssh_known_hosts_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_ssh_known_hosts_cm", value)

    @property
    @pulumi.getter(name="argocdTlsCertsCm")
    def argocd_tls_certs_cm(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        """
        return pulumi.get(self, "argocd_tls_certs_cm")

    @argocd_tls_certs_cm.setter
    def argocd_tls_certs_cm(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "argocd_tls_certs_cm", value)

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]]:
        """
        is a map of [Config Management
        Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
        the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        """
        return pulumi.get(self, "config_management_plugins")

    @config_management_plugins.setter
    def config_management_plugins(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['InstanceConfigManagementPluginsArgs']]]]):
        pulumi.set(self, "config_management_plugins", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="repoCredentialSecrets")
    def repo_credential_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
        options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        """
        return pulumi.get(self, "repo_credential_secrets")

    @repo_credential_secrets.setter
    def repo_credential_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "repo_credential_secrets", value)

    @property
    @pulumi.getter(name="repoTemplateCredentialSecrets")
    def repo_template_credential_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
        the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        return pulumi.get(self, "repo_template_credential_secrets")

    @repo_template_credential_secrets.setter
    def repo_template_credential_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "repo_template_credential_secrets", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_set_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd: Optional[pulumi.Input[pulumi.InputType['InstanceArgocdArgs']]] = None,
                 argocd_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_ssh_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_rbac_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_ssh_known_hosts_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_tls_certs_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_management_plugins: Optional[pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['InstanceConfigManagementPluginsArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 repo_template_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 __props__=None):
        """
        Manages an Argo CD instance

        ## Example Usage

        ### Basic)
        ```python
        import pulumi
        import ediri_akp as akp

        argocd = akp.Instance("argocd", argocd=akp.InstanceArgocdArgs(
            spec=akp.InstanceArgocdSpecArgs(
                instance_spec=akp.InstanceArgocdSpecInstanceSpecArgs(
                    declarative_management_enabled=True,
                ),
                version="v2.8.4",
            ),
        ))
        ```

        ## Import

        Using `pulumi import`, import AKP instance using its `name`. For example:

        ```sh
        $ pulumi import akp:index/instance:Instance example test
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] application_set_secret: stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
               ApplicationSet's pull request generator, see
               [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
               In this example, `tokenRef.secretName` would be application-set-secret.
        :param pulumi.Input[pulumi.InputType['InstanceArgocdArgs']] argocd: Argo CD instance configuration
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_cm: is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_config: configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_secret: contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_ssh_config: contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
               ConfigMap of Argo CD, for available options and examples, refer to [this
               documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_cm: configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
               details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_secret: contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
               CD, for more details and examples, refer to [this
               documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_rbac_cm: is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_secret: is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_ssh_known_hosts_cm: is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_tls_certs_cm: is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['InstanceConfigManagementPluginsArgs']]]] config_management_plugins: is a map of [Config Management
               Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
               the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        :param pulumi.Input[str] name: Instance name
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_credential_secrets: is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
               options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_template_credential_secrets: is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
               the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Argo CD instance

        ## Example Usage

        ### Basic)
        ```python
        import pulumi
        import ediri_akp as akp

        argocd = akp.Instance("argocd", argocd=akp.InstanceArgocdArgs(
            spec=akp.InstanceArgocdSpecArgs(
                instance_spec=akp.InstanceArgocdSpecInstanceSpecArgs(
                    declarative_management_enabled=True,
                ),
                version="v2.8.4",
            ),
        ))
        ```

        ## Import

        Using `pulumi import`, import AKP instance using its `name`. For example:

        ```sh
        $ pulumi import akp:index/instance:Instance example test
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_set_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd: Optional[pulumi.Input[pulumi.InputType['InstanceArgocdArgs']]] = None,
                 argocd_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_image_updater_ssh_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_notifications_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_rbac_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_ssh_known_hosts_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 argocd_tls_certs_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_management_plugins: Optional[pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['InstanceConfigManagementPluginsArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 repo_template_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["application_set_secret"] = None if application_set_secret is None else pulumi.Output.secret(application_set_secret)
            if argocd is None and not opts.urn:
                raise TypeError("Missing required property 'argocd'")
            __props__.__dict__["argocd"] = argocd
            __props__.__dict__["argocd_cm"] = argocd_cm
            __props__.__dict__["argocd_image_updater_config"] = argocd_image_updater_config
            __props__.__dict__["argocd_image_updater_secret"] = None if argocd_image_updater_secret is None else pulumi.Output.secret(argocd_image_updater_secret)
            __props__.__dict__["argocd_image_updater_ssh_config"] = argocd_image_updater_ssh_config
            __props__.__dict__["argocd_notifications_cm"] = argocd_notifications_cm
            __props__.__dict__["argocd_notifications_secret"] = None if argocd_notifications_secret is None else pulumi.Output.secret(argocd_notifications_secret)
            __props__.__dict__["argocd_rbac_cm"] = argocd_rbac_cm
            __props__.__dict__["argocd_secret"] = None if argocd_secret is None else pulumi.Output.secret(argocd_secret)
            __props__.__dict__["argocd_ssh_known_hosts_cm"] = argocd_ssh_known_hosts_cm
            __props__.__dict__["argocd_tls_certs_cm"] = argocd_tls_certs_cm
            __props__.__dict__["config_management_plugins"] = config_management_plugins
            __props__.__dict__["name"] = name
            __props__.__dict__["repo_credential_secrets"] = None if repo_credential_secrets is None else pulumi.Output.secret(repo_credential_secrets)
            __props__.__dict__["repo_template_credential_secrets"] = None if repo_template_credential_secrets is None else pulumi.Output.secret(repo_template_credential_secrets)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["applicationSetSecret", "argocdImageUpdaterSecret", "argocdNotificationsSecret", "argocdSecret", "repoCredentialSecrets", "repoTemplateCredentialSecrets"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'akp:index/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_set_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd: Optional[pulumi.Input[pulumi.InputType['InstanceArgocdArgs']]] = None,
            argocd_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_image_updater_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_image_updater_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_image_updater_ssh_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_notifications_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_notifications_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_rbac_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_secret: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_ssh_known_hosts_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            argocd_tls_certs_cm: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            config_management_plugins: Optional[pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['InstanceConfigManagementPluginsArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            repo_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
            repo_template_credential_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] application_set_secret: stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
               ApplicationSet's pull request generator, see
               [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
               In this example, `tokenRef.secretName` would be application-set-secret.
        :param pulumi.Input[pulumi.InputType['InstanceArgocdArgs']] argocd: Argo CD instance configuration
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_cm: is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_config: configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_secret: contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
               available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_image_updater_ssh_config: contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
               ConfigMap of Argo CD, for available options and examples, refer to [this
               documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_cm: configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
               details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_notifications_secret: contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
               CD, for more details and examples, refer to [this
               documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_rbac_cm: is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_secret: is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_ssh_known_hosts_cm: is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] argocd_tls_certs_cm: is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['InstanceConfigManagementPluginsArgs']]]] config_management_plugins: is a map of [Config Management
               Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
               the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        :param pulumi.Input[str] name: Instance name
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_credential_secrets: is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
               options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] repo_template_credential_secrets: is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
               the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
               Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
               concrete example, refer to [this
               documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["application_set_secret"] = application_set_secret
        __props__.__dict__["argocd"] = argocd
        __props__.__dict__["argocd_cm"] = argocd_cm
        __props__.__dict__["argocd_image_updater_config"] = argocd_image_updater_config
        __props__.__dict__["argocd_image_updater_secret"] = argocd_image_updater_secret
        __props__.__dict__["argocd_image_updater_ssh_config"] = argocd_image_updater_ssh_config
        __props__.__dict__["argocd_notifications_cm"] = argocd_notifications_cm
        __props__.__dict__["argocd_notifications_secret"] = argocd_notifications_secret
        __props__.__dict__["argocd_rbac_cm"] = argocd_rbac_cm
        __props__.__dict__["argocd_secret"] = argocd_secret
        __props__.__dict__["argocd_ssh_known_hosts_cm"] = argocd_ssh_known_hosts_cm
        __props__.__dict__["argocd_tls_certs_cm"] = argocd_tls_certs_cm
        __props__.__dict__["config_management_plugins"] = config_management_plugins
        __props__.__dict__["name"] = name
        __props__.__dict__["repo_credential_secrets"] = repo_credential_secrets
        __props__.__dict__["repo_template_credential_secrets"] = repo_template_credential_secrets
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationSetSecret")
    def application_set_secret(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
        ApplicationSet's pull request generator, see
        [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
        In this example, `tokenRef.secretName` would be application-set-secret.
        """
        return pulumi.get(self, "application_set_secret")

    @property
    @pulumi.getter
    def argocd(self) -> pulumi.Output['outputs.InstanceArgocd']:
        """
        Argo CD instance configuration
        """
        return pulumi.get(self, "argocd")

    @property
    @pulumi.getter(name="argocdCm")
    def argocd_cm(self) -> pulumi.Output[Mapping[str, str]]:
        """
        is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
        """
        return pulumi.get(self, "argocd_cm")

    @property
    @pulumi.getter(name="argocdImageUpdaterConfig")
    def argocd_image_updater_config(self) -> pulumi.Output[Mapping[str, str]]:
        """
        configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_config")

    @property
    @pulumi.getter(name="argocdImageUpdaterSecret")
    def argocd_image_updater_secret(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
        available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_secret")

    @property
    @pulumi.getter(name="argocdImageUpdaterSshConfig")
    def argocd_image_updater_ssh_config(self) -> pulumi.Output[Mapping[str, str]]:
        """
        contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
        ConfigMap of Argo CD, for available options and examples, refer to [this
        documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_image_updater_ssh_config")

    @property
    @pulumi.getter(name="argocdNotificationsCm")
    def argocd_notifications_cm(self) -> pulumi.Output[Mapping[str, str]]:
        """
        configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
        details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
        """
        return pulumi.get(self, "argocd_notifications_cm")

    @property
    @pulumi.getter(name="argocdNotificationsSecret")
    def argocd_notifications_secret(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
        CD, for more details and examples, refer to [this
        documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
        """
        return pulumi.get(self, "argocd_notifications_secret")

    @property
    @pulumi.getter(name="argocdRbacCm")
    def argocd_rbac_cm(self) -> pulumi.Output[Mapping[str, str]]:
        """
        is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
        """
        return pulumi.get(self, "argocd_rbac_cm")

    @property
    @pulumi.getter(name="argocdSecret")
    def argocd_secret(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
        """
        return pulumi.get(self, "argocd_secret")

    @property
    @pulumi.getter(name="argocdSshKnownHostsCm")
    def argocd_ssh_known_hosts_cm(self) -> pulumi.Output[Mapping[str, str]]:
        """
        is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
        """
        return pulumi.get(self, "argocd_ssh_known_hosts_cm")

    @property
    @pulumi.getter(name="argocdTlsCertsCm")
    def argocd_tls_certs_cm(self) -> pulumi.Output[Mapping[str, str]]:
        """
        is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
        """
        return pulumi.get(self, "argocd_tls_certs_cm")

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.InstanceConfigManagementPlugins']]]:
        """
        is a map of [Config Management
        Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
        the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
        """
        return pulumi.get(self, "config_management_plugins")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repoCredentialSecrets")
    def repo_credential_secrets(self) -> pulumi.Output[Optional[Mapping[str, Mapping[str, str]]]]:
        """
        is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
        options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
        """
        return pulumi.get(self, "repo_credential_secrets")

    @property
    @pulumi.getter(name="repoTemplateCredentialSecrets")
    def repo_template_credential_secrets(self) -> pulumi.Output[Optional[Mapping[str, Mapping[str, str]]]]:
        """
        is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
        the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
        Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
        concrete example, refer to [this
        documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
        """
        return pulumi.get(self, "repo_template_credential_secrets")

