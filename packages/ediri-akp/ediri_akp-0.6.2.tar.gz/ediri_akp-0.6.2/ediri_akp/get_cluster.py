# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, annotations=None, id=None, instance_id=None, kube_config=None, labels=None, name=None, namespace=None, remove_agent_resources_on_destroy=None, spec=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if kube_config and not isinstance(kube_config, dict):
            raise TypeError("Expected argument 'kube_config' to be a dict")
        pulumi.set(__self__, "kube_config", kube_config)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if remove_agent_resources_on_destroy and not isinstance(remove_agent_resources_on_destroy, bool):
            raise TypeError("Expected argument 'remove_agent_resources_on_destroy' to be a bool")
        pulumi.set(__self__, "remove_agent_resources_on_destroy", remove_agent_resources_on_destroy)
        if spec and not isinstance(spec, dict):
            raise TypeError("Expected argument 'spec' to be a dict")
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Cluster ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Argo CD instance ID
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> 'outputs.GetClusterKubeConfigResult':
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Agent installation namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="removeAgentResourcesOnDestroy")
    def remove_agent_resources_on_destroy(self) -> bool:
        """
        Remove agent Kubernetes resources from the managed cluster when destroying cluster
        """
        return pulumi.get(self, "remove_agent_resources_on_destroy")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.GetClusterSpecResult':
        """
        Cluster spec
        """
        return pulumi.get(self, "spec")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            annotations=self.annotations,
            id=self.id,
            instance_id=self.instance_id,
            kube_config=self.kube_config,
            labels=self.labels,
            name=self.name,
            namespace=self.namespace,
            remove_agent_resources_on_destroy=self.remove_agent_resources_on_destroy,
            spec=self.spec)


def get_cluster(instance_id: Optional[str] = None,
                name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Gets information about a cluster by its name and Argo CD instance ID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_akp as akp

    example_instance = akp.get_instance(name="test")
    example_cluster = akp.get_cluster(instance_id=example_instance.id,
        name="test")
    ```


    :param str instance_id: Argo CD instance ID
    :param str name: Cluster name
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akp:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        kube_config=pulumi.get(__ret__, 'kube_config'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        remove_agent_resources_on_destroy=pulumi.get(__ret__, 'remove_agent_resources_on_destroy'),
        spec=pulumi.get(__ret__, 'spec'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(instance_id: Optional[pulumi.Input[str]] = None,
                       name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Gets information about a cluster by its name and Argo CD instance ID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_akp as akp

    example_instance = akp.get_instance(name="test")
    example_cluster = akp.get_cluster(instance_id=example_instance.id,
        name="test")
    ```


    :param str instance_id: Argo CD instance ID
    :param str name: Cluster name
    """
    ...
