# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, application_set_secret=None, argocd=None, argocd_cm=None, argocd_image_updater_config=None, argocd_image_updater_secret=None, argocd_image_updater_ssh_config=None, argocd_notifications_cm=None, argocd_notifications_secret=None, argocd_rbac_cm=None, argocd_secret=None, argocd_ssh_known_hosts_cm=None, argocd_tls_certs_cm=None, config_management_plugins=None, id=None, name=None, repo_credential_secrets=None, repo_template_credential_secrets=None):
        if application_set_secret and not isinstance(application_set_secret, dict):
            raise TypeError("Expected argument 'application_set_secret' to be a dict")
        pulumi.set(__self__, "application_set_secret", application_set_secret)
        if argocd and not isinstance(argocd, dict):
            raise TypeError("Expected argument 'argocd' to be a dict")
        pulumi.set(__self__, "argocd", argocd)
        if argocd_cm and not isinstance(argocd_cm, dict):
            raise TypeError("Expected argument 'argocd_cm' to be a dict")
        pulumi.set(__self__, "argocd_cm", argocd_cm)
        if argocd_image_updater_config and not isinstance(argocd_image_updater_config, dict):
            raise TypeError("Expected argument 'argocd_image_updater_config' to be a dict")
        pulumi.set(__self__, "argocd_image_updater_config", argocd_image_updater_config)
        if argocd_image_updater_secret and not isinstance(argocd_image_updater_secret, dict):
            raise TypeError("Expected argument 'argocd_image_updater_secret' to be a dict")
        pulumi.set(__self__, "argocd_image_updater_secret", argocd_image_updater_secret)
        if argocd_image_updater_ssh_config and not isinstance(argocd_image_updater_ssh_config, dict):
            raise TypeError("Expected argument 'argocd_image_updater_ssh_config' to be a dict")
        pulumi.set(__self__, "argocd_image_updater_ssh_config", argocd_image_updater_ssh_config)
        if argocd_notifications_cm and not isinstance(argocd_notifications_cm, dict):
            raise TypeError("Expected argument 'argocd_notifications_cm' to be a dict")
        pulumi.set(__self__, "argocd_notifications_cm", argocd_notifications_cm)
        if argocd_notifications_secret and not isinstance(argocd_notifications_secret, dict):
            raise TypeError("Expected argument 'argocd_notifications_secret' to be a dict")
        pulumi.set(__self__, "argocd_notifications_secret", argocd_notifications_secret)
        if argocd_rbac_cm and not isinstance(argocd_rbac_cm, dict):
            raise TypeError("Expected argument 'argocd_rbac_cm' to be a dict")
        pulumi.set(__self__, "argocd_rbac_cm", argocd_rbac_cm)
        if argocd_secret and not isinstance(argocd_secret, dict):
            raise TypeError("Expected argument 'argocd_secret' to be a dict")
        pulumi.set(__self__, "argocd_secret", argocd_secret)
        if argocd_ssh_known_hosts_cm and not isinstance(argocd_ssh_known_hosts_cm, dict):
            raise TypeError("Expected argument 'argocd_ssh_known_hosts_cm' to be a dict")
        pulumi.set(__self__, "argocd_ssh_known_hosts_cm", argocd_ssh_known_hosts_cm)
        if argocd_tls_certs_cm and not isinstance(argocd_tls_certs_cm, dict):
            raise TypeError("Expected argument 'argocd_tls_certs_cm' to be a dict")
        pulumi.set(__self__, "argocd_tls_certs_cm", argocd_tls_certs_cm)
        if config_management_plugins and not isinstance(config_management_plugins, dict):
            raise TypeError("Expected argument 'config_management_plugins' to be a dict")
        pulumi.set(__self__, "config_management_plugins", config_management_plugins)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if repo_credential_secrets and not isinstance(repo_credential_secrets, dict):
            raise TypeError("Expected argument 'repo_credential_secrets' to be a dict")
        pulumi.set(__self__, "repo_credential_secrets", repo_credential_secrets)
        if repo_template_credential_secrets and not isinstance(repo_template_credential_secrets, dict):
            raise TypeError("Expected argument 'repo_template_credential_secrets' to be a dict")
        pulumi.set(__self__, "repo_template_credential_secrets", repo_template_credential_secrets)

    @property
    @pulumi.getter(name="applicationSetSecret")
    def application_set_secret(self) -> Mapping[str, str]:
        return pulumi.get(self, "application_set_secret")

    @property
    @pulumi.getter
    def argocd(self) -> 'outputs.GetInstanceArgocdResult':
        return pulumi.get(self, "argocd")

    @property
    @pulumi.getter(name="argocdCm")
    def argocd_cm(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_cm")

    @property
    @pulumi.getter(name="argocdImageUpdaterConfig")
    def argocd_image_updater_config(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_image_updater_config")

    @property
    @pulumi.getter(name="argocdImageUpdaterSecret")
    def argocd_image_updater_secret(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_image_updater_secret")

    @property
    @pulumi.getter(name="argocdImageUpdaterSshConfig")
    def argocd_image_updater_ssh_config(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_image_updater_ssh_config")

    @property
    @pulumi.getter(name="argocdNotificationsCm")
    def argocd_notifications_cm(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_notifications_cm")

    @property
    @pulumi.getter(name="argocdNotificationsSecret")
    def argocd_notifications_secret(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_notifications_secret")

    @property
    @pulumi.getter(name="argocdRbacCm")
    def argocd_rbac_cm(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_rbac_cm")

    @property
    @pulumi.getter(name="argocdSecret")
    def argocd_secret(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_secret")

    @property
    @pulumi.getter(name="argocdSshKnownHostsCm")
    def argocd_ssh_known_hosts_cm(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_ssh_known_hosts_cm")

    @property
    @pulumi.getter(name="argocdTlsCertsCm")
    def argocd_tls_certs_cm(self) -> Mapping[str, str]:
        return pulumi.get(self, "argocd_tls_certs_cm")

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> Mapping[str, 'outputs.GetInstanceConfigManagementPluginsResult']:
        return pulumi.get(self, "config_management_plugins")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repoCredentialSecrets")
    def repo_credential_secrets(self) -> Mapping[str, Mapping[str, str]]:
        return pulumi.get(self, "repo_credential_secrets")

    @property
    @pulumi.getter(name="repoTemplateCredentialSecrets")
    def repo_template_credential_secrets(self) -> Mapping[str, Mapping[str, str]]:
        return pulumi.get(self, "repo_template_credential_secrets")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            application_set_secret=self.application_set_secret,
            argocd=self.argocd,
            argocd_cm=self.argocd_cm,
            argocd_image_updater_config=self.argocd_image_updater_config,
            argocd_image_updater_secret=self.argocd_image_updater_secret,
            argocd_image_updater_ssh_config=self.argocd_image_updater_ssh_config,
            argocd_notifications_cm=self.argocd_notifications_cm,
            argocd_notifications_secret=self.argocd_notifications_secret,
            argocd_rbac_cm=self.argocd_rbac_cm,
            argocd_secret=self.argocd_secret,
            argocd_ssh_known_hosts_cm=self.argocd_ssh_known_hosts_cm,
            argocd_tls_certs_cm=self.argocd_tls_certs_cm,
            config_management_plugins=self.config_management_plugins,
            id=self.id,
            name=self.name,
            repo_credential_secrets=self.repo_credential_secrets,
            repo_template_credential_secrets=self.repo_template_credential_secrets)


def get_instance(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Gets information about an Argo CD instance by its name

    ## Example Usage

    ```python
    import pulumi
    import pulumi_akp as akp

    example = akp.get_instance(name="test")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akp:index/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        application_set_secret=pulumi.get(__ret__, 'application_set_secret'),
        argocd=pulumi.get(__ret__, 'argocd'),
        argocd_cm=pulumi.get(__ret__, 'argocd_cm'),
        argocd_image_updater_config=pulumi.get(__ret__, 'argocd_image_updater_config'),
        argocd_image_updater_secret=pulumi.get(__ret__, 'argocd_image_updater_secret'),
        argocd_image_updater_ssh_config=pulumi.get(__ret__, 'argocd_image_updater_ssh_config'),
        argocd_notifications_cm=pulumi.get(__ret__, 'argocd_notifications_cm'),
        argocd_notifications_secret=pulumi.get(__ret__, 'argocd_notifications_secret'),
        argocd_rbac_cm=pulumi.get(__ret__, 'argocd_rbac_cm'),
        argocd_secret=pulumi.get(__ret__, 'argocd_secret'),
        argocd_ssh_known_hosts_cm=pulumi.get(__ret__, 'argocd_ssh_known_hosts_cm'),
        argocd_tls_certs_cm=pulumi.get(__ret__, 'argocd_tls_certs_cm'),
        config_management_plugins=pulumi.get(__ret__, 'config_management_plugins'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        repo_credential_secrets=pulumi.get(__ret__, 'repo_credential_secrets'),
        repo_template_credential_secrets=pulumi.get(__ret__, 'repo_template_credential_secrets'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Gets information about an Argo CD instance by its name

    ## Example Usage

    ```python
    import pulumi
    import pulumi_akp as akp

    example = akp.get_instance(name="test")
    ```
    """
    ...
