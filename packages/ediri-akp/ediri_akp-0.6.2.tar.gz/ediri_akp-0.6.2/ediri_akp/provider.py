# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 org_name: pulumi.Input[str],
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 skip_tls_verify: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] org_name: Organization Name
        :param pulumi.Input[str] api_key_id: API Key Id. Use environment variable `AKUITY_API_KEY_ID`
        :param pulumi.Input[str] api_key_secret: API Key Secret, Use environment variable `AKUITY_API_KEY_SECRET`
        :param pulumi.Input[str] server_url: Akuity Platform API URL, default: `https://akuity.cloud`. You can use environment variable `AKUITY_SERVER_URL` instead
        :param pulumi.Input[bool] skip_tls_verify: Skip TLS Verify. Only use for testing self-hosted version
        """
        pulumi.set(__self__, "org_name", org_name)
        if api_key_id is None:
            api_key_id = _utilities.get_env('AKUITY_API_KEY_ID')
        if api_key_id is not None:
            pulumi.set(__self__, "api_key_id", api_key_id)
        if api_key_secret is None:
            api_key_secret = _utilities.get_env('AKUITY_API_KEY_SECRET')
        if api_key_secret is not None:
            pulumi.set(__self__, "api_key_secret", api_key_secret)
        if server_url is None:
            server_url = _utilities.get_env('AKUITY_SERVER_URL')
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Input[str]:
        """
        Organization Name
        """
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_name", value)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        API Key Id. Use environment variable `AKUITY_API_KEY_ID`
        """
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> Optional[pulumi.Input[str]]:
        """
        API Key Secret, Use environment variable `AKUITY_API_KEY_SECRET`
        """
        return pulumi.get(self, "api_key_secret")

    @api_key_secret.setter
    def api_key_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_secret", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Akuity Platform API URL, default: `https://akuity.cloud`. You can use environment variable `AKUITY_SERVER_URL` instead
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter(name="skipTlsVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip TLS Verify. Only use for testing self-hosted version
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 org_name: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 skip_tls_verify: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The provider type for the akp package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key_id: API Key Id. Use environment variable `AKUITY_API_KEY_ID`
        :param pulumi.Input[str] api_key_secret: API Key Secret, Use environment variable `AKUITY_API_KEY_SECRET`
        :param pulumi.Input[str] org_name: Organization Name
        :param pulumi.Input[str] server_url: Akuity Platform API URL, default: `https://akuity.cloud`. You can use environment variable `AKUITY_SERVER_URL` instead
        :param pulumi.Input[bool] skip_tls_verify: Skip TLS Verify. Only use for testing self-hosted version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the akp package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_secret: Optional[pulumi.Input[str]] = None,
                 org_name: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 skip_tls_verify: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if api_key_id is None:
                api_key_id = _utilities.get_env('AKUITY_API_KEY_ID')
            __props__.__dict__["api_key_id"] = None if api_key_id is None else pulumi.Output.secret(api_key_id)
            if api_key_secret is None:
                api_key_secret = _utilities.get_env('AKUITY_API_KEY_SECRET')
            __props__.__dict__["api_key_secret"] = None if api_key_secret is None else pulumi.Output.secret(api_key_secret)
            if org_name is None and not opts.urn:
                raise TypeError("Missing required property 'org_name'")
            __props__.__dict__["org_name"] = org_name
            if server_url is None:
                server_url = _utilities.get_env('AKUITY_SERVER_URL')
            __props__.__dict__["server_url"] = server_url
            __props__.__dict__["skip_tls_verify"] = pulumi.Output.from_input(skip_tls_verify).apply(pulumi.runtime.to_json) if skip_tls_verify is not None else None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKeyId", "apiKeySecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'akp',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        API Key Id. Use environment variable `AKUITY_API_KEY_ID`
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> pulumi.Output[Optional[str]]:
        """
        API Key Secret, Use environment variable `AKUITY_API_KEY_SECRET`
        """
        return pulumi.get(self, "api_key_secret")

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Output[str]:
        """
        Organization Name
        """
        return pulumi.get(self, "org_name")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[Optional[str]]:
        """
        Akuity Platform API URL, default: `https://akuity.cloud`. You can use environment variable `AKUITY_SERVER_URL` instead
        """
        return pulumi.get(self, "server_url")

