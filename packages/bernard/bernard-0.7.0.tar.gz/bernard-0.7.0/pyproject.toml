[tool.poetry]
name = "bernard"
version = "0.7.0"
description = "Bot Engine Responding Naturally At Requests Detection"
authors = ["RÃ©my Sanchez <remy.sanchez@hyperthese.net>"]
license = "AGPL-3.0-or-later"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.0"
watchdog = "*"
babel = "^2.0"
facepy = "^1.0"
google-auth = "^2.0"
google-auth-oauthlib = "^1.0"
google-api-python-client = "*"
httpx = "*"
pyjwt = "^2.0"
python-dateutil = "^2.0"
pytz = "*"
redis = ">=4.2.0rc1"
sentry-sdk = "*"
orjson = "^3.0"
unidecode = "^1.0"
keyring = "*"
rich = "*"

[tool.ruff]
src = ["src", "test"]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # McCabe Complexity
    "C90",
    # Async
    "ASYNC",
    # Bandit
    "S",
    # Builtins
    "A",
    # Comprehensions
    "C4",
    # Datetime
    "DTZ",
    # Debugger
    "T10",
    # Error Messages
    "EM",
    # Executable (just in case)
    "EXE",
    # Logging
    "G",
    # PEP 420
    "INP",
    # No print
    "T20",
    # Pytest
    "PT",
    # Private member access
    "SLF",
    # Slots
    "SLOT",
    # Simplify
    "SIM",
    # Clean imports
    "TID",
    # Type checking blocks
    "TCH",
    # Use pathlib pedantism
    "PTH",
    # Don't allow not done stuff in code
    "FIX",
    # Don't comment code
    "ERA",
    # Exception anti-patterns
    "TRY",
    # Performance anti-patterns
    "PERF",
    # Ruff stuff
    "RUF",
]
ignore = [
    "ANN101",
    "ANN102",
    "ANN401",
    "TRY003",
    "C408",
    "TID252",
    "TRY301",
    "PERF203",
    "SIM108",
    "SIM401",
    "SIM118",
    "TRY004",
    "SLF001",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ANN", "D", "S", "INP", "SLF001"]
"src/bernard/platforms/test/**/*" = ["ANN", "D", "S", "INP", "SLF001"]
"src/bernard/conf/default_settings.py" = ["ERA001"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.poetry.scripts]
bernard = 'bernard.misc.main:main'

[tool.poetry-dynamic-versioning]
enable = false
pattern = "default-unprefixed"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base, index=1), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""

[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
