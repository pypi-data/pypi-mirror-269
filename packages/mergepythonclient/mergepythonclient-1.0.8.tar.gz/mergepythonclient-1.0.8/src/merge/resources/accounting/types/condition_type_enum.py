# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ConditionTypeEnum(str, enum.Enum):
    """
    - `BOOLEAN` - BOOLEAN
    - `DATE` - DATE
    - `DATE_TIME` - DATE_TIME
    - `INTEGER` - INTEGER
    - `FLOAT` - FLOAT
    - `STRING` - STRING
    - `LIST_OF_STRINGS` - LIST_OF_STRINGS
    """

    BOOLEAN = "BOOLEAN"
    DATE = "DATE"
    DATE_TIME = "DATE_TIME"
    INTEGER = "INTEGER"
    FLOAT = "FLOAT"
    STRING = "STRING"
    LIST_OF_STRINGS = "LIST_OF_STRINGS"

    def visit(
        self,
        boolean: typing.Callable[[], T_Result],
        date: typing.Callable[[], T_Result],
        date_time: typing.Callable[[], T_Result],
        integer: typing.Callable[[], T_Result],
        float_: typing.Callable[[], T_Result],
        string: typing.Callable[[], T_Result],
        list_of_strings: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ConditionTypeEnum.BOOLEAN:
            return boolean()
        if self is ConditionTypeEnum.DATE:
            return date()
        if self is ConditionTypeEnum.DATE_TIME:
            return date_time()
        if self is ConditionTypeEnum.INTEGER:
            return integer()
        if self is ConditionTypeEnum.FLOAT:
            return float_()
        if self is ConditionTypeEnum.STRING:
            return string()
        if self is ConditionTypeEnum.LIST_OF_STRINGS:
            return list_of_strings()
