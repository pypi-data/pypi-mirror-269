enum AnalysisStatus {
  QUEUED
  IN_PROGRESS
  FAILED
  COMPLETED
  UNKNOWN
}

"""Filter for GraphQL queries"""
input AnalysisStatusGraphQLFilter {
  eq: AnalysisStatus = null
  in_: [AnalysisStatus!] = null
  nin: [AnalysisStatus!] = null
  gt: AnalysisStatus = null
  gte: AnalysisStatus = null
  lt: AnalysisStatus = null
  lte: AnalysisStatus = null
}

"""Filter for GraphQL queries"""
input BoolGraphQLFilter {
  eq: Boolean = null
  in_: [Boolean!] = null
  nin: [Boolean!] = null
  gt: Boolean = null
  gte: Boolean = null
  lt: Boolean = null
  lte: Boolean = null
}

"""Date with time (isoformat)"""
scalar DateTime

"""Filter for GraphQL queries"""
input DatetimeGraphQLFilter {
  eq: DateTime = null
  in_: [DateTime!] = null
  nin: [DateTime!] = null
  gt: DateTime = null
  gte: DateTime = null
  lt: DateTime = null
  lte: DateTime = null
}

type GraphQLAnalysis {
  id: Int!
  type: String!
  status: AnalysisStatus!
  output: String
  timestampCompleted: DateTime
  active: Boolean!
  meta: JSON!
  sequencingGroups: [GraphQLSequencingGroup!]!
  project: GraphQLProject!
  auditLogs: [GraphQLAuditLog!]!
}

type GraphQLAnalysisRunner {
  arGuid: String!
  outputPath: String!
  timestamp: DateTime!
  accessLevel: String!
  repository: String!
  commit: String!
  script: String!
  description: String!
  driverImage: String!
  configPath: String!
  cwd: String
  environment: String!
  hailVersion: String
  batchUrl: String!
  submittingUser: String!
  meta: JSON!
  project: GraphQLProject!
}

type GraphQLAssay {
  id: Int!
  type: String!
  meta: JSON!
  externalIds: JSON!
  sample: GraphQLSample!
}

type GraphQLAuditLog {
  id: Int!
  author: String!
  timestamp: DateTime!
  arGuid: String
  comment: String
  meta: JSON!
}

type GraphQLEnum {
  analysisType: [String!]!
  assayType: [String!]!
  sampleType: [String!]!
  sequencingPlatform: [String!]!
  sequencingTechnology: [String!]!
  sequencingType: [String!]!
}

type GraphQLFamily {
  id: Int!
  externalId: String!
  description: String
  codedPhenotype: String
  project: GraphQLProject!
  participants: [GraphQLParticipant!]!
}

type GraphQLParticipant {
  id: Int!
  externalId: String!
  meta: JSON!
  reportedSex: Int
  reportedGender: String
  karyotype: String
  samples(type: StrGraphQLFilter = null, meta: JSON = null, active: BoolGraphQLFilter = null): [GraphQLSample!]!
  phenotypes: JSON!
  families: [GraphQLFamily!]!
  project: GraphQLProject!
  auditLog: GraphQLAuditLog
}

type GraphQLProject {
  id: Int!
  name: String!
  dataset: String!
  meta: JSON!
  analysisRunner(arGuid: StrGraphQLFilter = null, author: StrGraphQLFilter = null, repository: StrGraphQLFilter = null, accessLevel: StrGraphQLFilter = null, environment: StrGraphQLFilter = null): [GraphQLAnalysisRunner!]!
  pedigree(internalFamilyIds: [Int!] = null, replaceWithParticipantExternalIds: Boolean! = true, replaceWithFamilyExternalIds: Boolean! = true, includeParticipantsNotInFamilies: Boolean! = false, emptyParticipantValue: String = null): [JSON!]!
  families: [GraphQLFamily!]!
  participants: [GraphQLParticipant!]!
  samples(type: StrGraphQLFilter = null, externalId: StrGraphQLFilter = null, id: StrGraphQLFilter = null, meta: JSON = null): [GraphQLSample!]!
  sequencingGroups(id: StrGraphQLFilter = null, externalId: StrGraphQLFilter = null, type: StrGraphQLFilter = null, technology: StrGraphQLFilter = null, platform: StrGraphQLFilter = null, activeOnly: BoolGraphQLFilter = null): [GraphQLSequencingGroup!]!
  analyses(type: StrGraphQLFilter = null, status: AnalysisStatusGraphQLFilter = null, active: BoolGraphQLFilter = null, meta: JSON = null, timestampCompleted: DatetimeGraphQLFilter = null): [GraphQLAnalysis!]!
}

type GraphQLSample {
  id: String!
  externalId: String!
  active: Boolean!
  meta: JSON!
  type: String!
  participant: GraphQLParticipant
  assays(type: StrGraphQLFilter = null): [GraphQLAssay!]!
  project: GraphQLProject!
  sequencingGroups(id: StrGraphQLFilter = null, type: StrGraphQLFilter = null, technology: StrGraphQLFilter = null, platform: StrGraphQLFilter = null, meta: JSON = null, activeOnly: BoolGraphQLFilter = null): [GraphQLSequencingGroup!]!
}

type GraphQLSequencingGroup {
  id: String!
  type: String!
  technology: String!
  platform: String!
  meta: JSON!
  externalIds: JSON!
  sample: GraphQLSample!
  analyses(status: AnalysisStatusGraphQLFilter = null, type: StrGraphQLFilter = null, meta: JSON = null, active: BoolGraphQLFilter = null, project: StrGraphQLFilter = null): [GraphQLAnalysis!]!
  assays: [GraphQLAssay!]!
}

"""Filter for GraphQL queries"""
input IntGraphQLFilter {
  eq: Int = null
  in_: [Int!] = null
  nin: [Int!] = null
  gt: Int = null
  gte: Int = null
  lt: Int = null
  lte: Int = null
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Query {
  enum: GraphQLEnum!
  project(name: String!): GraphQLProject!
  sample(id: StrGraphQLFilter = null, project: StrGraphQLFilter = null, type: StrGraphQLFilter = null, meta: JSON = null, externalId: StrGraphQLFilter = null, participantId: IntGraphQLFilter = null, active: BoolGraphQLFilter = null): [GraphQLSample!]!
  sequencingGroups(id: StrGraphQLFilter = null, project: StrGraphQLFilter = null, sampleId: StrGraphQLFilter = null, type: StrGraphQLFilter = null, technology: StrGraphQLFilter = null, platform: StrGraphQLFilter = null, activeOnly: BoolGraphQLFilter = null): [GraphQLSequencingGroup!]!
  assay(id: Int!): GraphQLAssay!
  participant(id: Int!): GraphQLParticipant!
  family(familyId: Int!): GraphQLFamily!
  myProjects: [GraphQLProject!]!
  analysisRunner(arGuid: String!): GraphQLAnalysisRunner!
}

"""Filter for GraphQL queries"""
input StrGraphQLFilter {
  eq: String = null
  in_: [String!] = null
  nin: [String!] = null
  gt: String = null
  gte: String = null
  lt: String = null
  lte: String = null
}
