[tool.poetry]
name = "docugami-langchain"
version = "0.0.7rc31"
description = "An integration package connecting Docugami and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/docugami/docugami-langchain"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/docugami/docugami-langchain/tree/master"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
langchain-core = ">=0.1.40"
langchain-community = ">=0.0.31"
langgraph = ">=0.0.32"
dgml-utils = ">=0.3.3"
wordtodigits = ">=1.0.2"
python-dateutil = ">=2.9.0"
pandas = ">=2.2.1"
pyyaml = ">=6.0.1"
openpyxl = ">=3.1.2"
sqlglot = ">=23.7.0"
tabulate = ">=0.9.0"
rerankers = { extras = ["all"], version = ">=0.2.0" }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
flaky = "^3.8.1"
pytest = ">=8.0.2"
pytest-mock = ">=3.12.0"
pytest-watcher = ">=0.4.1"
pytest-asyncio = ">=0.23.5"
sentence-transformers = ">=2.5.1"
langchain-openai = ">=0.0.8"
langchain-fireworks = ">=0.1.1"
faiss-cpu = ">=1.8.0"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = ">=2.2.6"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = ">=0.3.0"

[tool.poetry.group.typing.dependencies]
mypy = ">=1.8.0"
types-lxml = ">=2024.3.27"
types-python-dateutil = ">=2.9.0.20240316"
types-pyyaml = ">=6.0.12.12"
types-requests = ">=2.31.0.20240218"
types-regex = "^2023.12.25.20240311"
types-tabulate = "^0.9.0.20240106"

[tool.ruff]
lint.select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
]
line-length = 200

[tool.mypy]
disallow_untyped_defs = "True"
disable_error_code = "typeddict-item"

[[tool.mypy.overrides]]
module = [
    "wordtodigits", "pandas", "langgraph.*", "rerankers.*", "flaky",
]
ignore_missing_imports = true

[tool.coverage.run]
omit = [
    "tests/*",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
