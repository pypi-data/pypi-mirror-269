#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from functools import partial
import logging
import signal
import os

from flamingo.server.logging import RPCHandler

rpc_logging_handler = RPCHandler(level=logging.DEBUG)

logging.basicConfig(level=logging.DEBUG)
logging.root.handlers = [rpc_logging_handler]

# setup server
import asyncio  # NOQA

from aiohttp.web import Application, run_app  # NOQA
import aiohttp

from flamingo.core.utils.cli import gen_default_parser, parse_args, error  # NOQA
from flamingo.server.server import Server  # NOQA

AIOHTTP_VERSION = tuple(
    int(part) for part in aiohttp.__version__.split('.')[:2]
)

# parse command line
parser = gen_default_parser(prog='flamingo server')

parser.add_argument('--port', type=int, default=8080)
parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--shutdown-timeout', type=float, default=0.0)
parser.add_argument('--disable-overlay', action='store_true')
parser.add_argument('--enable-browser-caching', action='store_true')
parser.add_argument('--disable-directory-index', action='store_true')
parser.add_argument('--disable-directory-listing', action='store_true')
parser.add_argument('--refresh-interval', type=float, default=1)
parser.add_argument('--threads', type=int, default=6)
parser.add_argument('--log-backlog', type=int, default=2500)
parser.add_argument('--shell', action='store_true')
parser.add_argument('--shell-history', action='store_true')

namespace, settings = parse_args(parser, setup_logging=False)

if namespace.threads < 4:
    exit(error('at least 4 threads are required to run properly'))

log_level = {
    'DEBUG': logging.DEBUG,
    'INFO': logging.INFO,
    'WARN': logging.WARN,
    'ERROR': logging.ERROR,
    'FATAL': logging.FATAL,
}[namespace.log_level]

rpc_logging_handler.internal_level = log_level
rpc_logging_handler.buffer_max_size = namespace.log_backlog
rpc_logging_handler.loggers = namespace.loggers

# setup aiohttp app
loop = asyncio.get_event_loop()
app = Application(loop=loop)

# setup flamingo server
try:
    server = Server(
        app=app,
        loop=loop,
        max_workers=namespace.threads,
        settings_paths=namespace.settings or [],
        overlay=not namespace.disable_overlay,
        directory_index=not namespace.disable_directory_index,
        directory_listing=not namespace.disable_directory_listing,
        browser_caching=namespace.enable_browser_caching,
        watcher_interval=namespace.refresh_interval,
        rpc_logging_handler=rpc_logging_handler,
    )

except KeyboardInterrupt:
    exit(1)

# setup shell
if namespace.shell:
    async def start_shell(server):
        def _start_shell(server):
            server.start_shell()
            os.kill(os.getpid(), signal.SIGTERM)

        await server.await_unlock()

        await server.loop.run_in_executor(
            server.executor,
            partial(_start_shell, server)
        )

        print('shell stopped')

    loop.create_task(start_shell(server))


# setup shutdown
async def startup(app):
    server = app['server']

    await server.loop.run_in_executor(
        server.executor,
        partial(server.setup, initial=True),
    )

    print('starting server on http://localhost:{}/'.format(namespace.port))


async def shutdown(app):
    print('\rshutting down server')

    await server.loop.run_in_executor(None, app['server'].shutdown)
    await server.rpc.shutdown()

app.on_startup.append(startup)
app.on_shutdown.append(shutdown)

keyword_args = {
    'app': app,
    'host': namespace.host,
    'port': namespace.port,
    'shutdown_timeout': namespace.shutdown_timeout,
    'print': lambda *args, **kwargs: None,
}

# In aiohttp 3.8 the keyword "loop" was added, which is mandatory if  you donâ€™t
# want aiohttp to start a new event loop but use your previously created one
if AIOHTTP_VERSION >= (3, 8):
    keyword_args['loop'] = loop

# run
try:
    run_app(**keyword_args)

except OSError:
    server.shutdown()

    exit(error('ERROR: can not bind to port {}'.format(namespace.port)))
