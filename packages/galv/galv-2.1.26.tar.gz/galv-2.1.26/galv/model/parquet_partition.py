# coding: utf-8

"""
    Battery Data API

    A standard API for accessing battery experiment datasets and metadata  # noqa: E501

    The version of the OpenAPI document: 2.1.26
    Contact: martin.robinson@cs.ox.ac.uk
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from galv import schemas  # noqa: F401


class ParquetPartition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "parquet_file",
            "partition_number",
            "permissions",
            "uploaded",
            "observed_file",
            "uuid",
            "url",
            "upload_errors",
        }
        
        class properties:
            url = schemas.StrSchema
            uuid = schemas.UUIDSchema
            
            
            class parquet_file(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parquet_file':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            observed_file = schemas.StrSchema
            partition_number = schemas.IntSchema
            uploaded = schemas.BoolSchema
            
            
            class upload_errors(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'upload_errors':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class permissions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        read = schemas.BoolSchema
                        write = schemas.BoolSchema
                        create = schemas.BoolSchema
                        __annotations__ = {
                            "read": read,
                            "write": write,
                            "create": create,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["read"]) -> MetaOapg.properties.read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["write"]) -> MetaOapg.properties.write: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["create"]) -> MetaOapg.properties.create: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["read"]) -> typing.Union[MetaOapg.properties.read, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["write"]) -> typing.Union[MetaOapg.properties.write, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["create"]) -> typing.Union[MetaOapg.properties.create, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    read: typing.Union[MetaOapg.properties.read, bool, schemas.Unset] = schemas.unset,
                    write: typing.Union[MetaOapg.properties.write, bool, schemas.Unset] = schemas.unset,
                    create: typing.Union[MetaOapg.properties.create, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        *_args,
                        read=read,
                        write=write,
                        create=create,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "url": url,
                "uuid": uuid,
                "parquet_file": parquet_file,
                "observed_file": observed_file,
                "partition_number": partition_number,
                "uploaded": uploaded,
                "upload_errors": upload_errors,
                "permissions": permissions,
            }
    
    parquet_file: MetaOapg.properties.parquet_file
    partition_number: MetaOapg.properties.partition_number
    permissions: MetaOapg.properties.permissions
    uploaded: MetaOapg.properties.uploaded
    observed_file: MetaOapg.properties.observed_file
    uuid: MetaOapg.properties.uuid
    url: MetaOapg.properties.url
    upload_errors: MetaOapg.properties.upload_errors
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parquet_file"]) -> MetaOapg.properties.parquet_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observed_file"]) -> MetaOapg.properties.observed_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition_number"]) -> MetaOapg.properties.partition_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploaded"]) -> MetaOapg.properties.uploaded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "uuid", "parquet_file", "observed_file", "partition_number", "uploaded", "upload_errors", "permissions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parquet_file"]) -> MetaOapg.properties.parquet_file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observed_file"]) -> MetaOapg.properties.observed_file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition_number"]) -> MetaOapg.properties.partition_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploaded"]) -> MetaOapg.properties.uploaded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "uuid", "parquet_file", "observed_file", "partition_number", "uploaded", "upload_errors", "permissions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        parquet_file: typing.Union[MetaOapg.properties.parquet_file, None, str, ],
        partition_number: typing.Union[MetaOapg.properties.partition_number, decimal.Decimal, int, ],
        permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, ],
        uploaded: typing.Union[MetaOapg.properties.uploaded, bool, ],
        observed_file: typing.Union[MetaOapg.properties.observed_file, str, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        upload_errors: typing.Union[MetaOapg.properties.upload_errors, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ParquetPartition':
        return super().__new__(
            cls,
            *_args,
            parquet_file=parquet_file,
            partition_number=partition_number,
            permissions=permissions,
            uploaded=uploaded,
            observed_file=observed_file,
            uuid=uuid,
            url=url,
            upload_errors=upload_errors,
            _configuration=_configuration,
            **kwargs,
        )
