# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2024-04-21 20:23
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django_enumfield.db.fields
import dynamicmethod.models
import shadowsocksz.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('domain', '0001_initial'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Shadowsocks Account',
            },
            bases=('auth.user', models.Model, dynamicmethod.models.DynamicMethodModel),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port_begin', models.PositiveIntegerField(default=8381, help_text='Port range allowed for all Shadowsocks nodes, make sure they are opened on both network firewall and host firewall.', verbose_name='Begin port')),
                ('port_end', models.PositiveIntegerField(default=8480, help_text='Port range allowed for all Shadowsocks nodes, make sure they are opened on both network firewall and host firewall.', verbose_name='End port')),
                ('timeout_remote', models.FloatField(default=3, help_text='Time out setting used by the manager internally, for communicating with remote SS nodes.', verbose_name='Global Network Timeout')),
                ('timeout_local', models.FloatField(default=0.5, help_text='Time out setting used by the manager internally, for communicating with local SS nodes.', verbose_name='Local Network Timeout')),
                ('cache_timeout', models.IntegerField(default=300, help_text='Timeout for the cache of the manger API and the Shadowsocks port accessibility.', verbose_name='Cache Timeout')),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Shadowsocks Configuration',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Give the node a name.', max_length=32, unique=True)),
                ('public_ip', models.GenericIPAddressField(blank=True, help_text='Public IP address for the node.', null=True, unique=True, unpack_ipv4=True, verbose_name='Public IP')),
                ('private_ip', models.GenericIPAddressField(blank=True, help_text='Private IP address for the node.', null=True, unpack_ipv4=True, verbose_name='Private IP')),
                ('location', models.CharField(blank=True, help_text='Geography location for the node, appears in the account notification Email if not blank, example: Hongkong.', max_length=64, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this node ready to be online')),
                ('sns_endpoint', models.CharField(blank=True, help_text='AWS SNS Arn which is used to send messages to manage this node(the feature of aws-cfn-vpn).', max_length=128, null=True)),
                ('sns_access_key', models.CharField(blank=True, help_text='AWS Access Key ID used to publish SNS messages.', max_length=128, null=True)),
                ('sns_secret_key', models.CharField(blank=True, help_text='AWS Secret Access Key used to publish SNS messages.', max_length=128, null=True)),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('record', models.ForeignKey(blank=True, help_text='Domain name resolved to the node public IP.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nodes', to='domain.Record')),
            ],
            options={
                'verbose_name': 'Shadowsocks Node',
            },
            bases=(models.Model, dynamicmethod.models.DynamicMethodModel),
        ),
        migrations.CreateModel(
            name='NodeAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Creating account on this node?')),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes_ref', to='shadowsocksz.Account')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts_ref', to='shadowsocksz.Node')),
            ],
            options={
                'verbose_name': 'Shadowsocks Node to Account',
            },
            bases=(models.Model, dynamicmethod.models.DynamicMethodModel),
        ),
        migrations.CreateModel(
            name='SSManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', django_enumfield.db.fields.EnumField(default=1, enum=shadowsocksz.models.InterfaceList, help_text='Network interface bound to Manager API on the node, use an internal interface if possible.')),
                ('port', models.PositiveIntegerField(default=6001, help_text='Port number bound to Manager API.')),
                ('encrypt', models.CharField(default='aes-256-cfb', help_text='Encrypt method: rc4-md5, aes-128-gcm, aes-192-gcm, aes-256-gcm, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-ctr, aes-192-ctr, aes-256-ctr, camellia-128-cfb, camellia-192-cfb, camellia-256-cfb, bf-cfb, chacha20-ietf-poly1305, xchacha20-ietf-poly1305, salsa20, chacha20 and chacha20-ietf.', max_length=32)),
                ('timeout', models.PositiveIntegerField(default=30, help_text='Socket timeout in seconds for Shadowsocks client.')),
                ('fastopen', models.BooleanField(default=False, help_text='Enable TCP fast open, with Linux kernel > 3.7.0.', verbose_name='Fast Open')),
                ('server_edition', django_enumfield.db.fields.EnumField(default=1, enum=shadowsocksz.models.ServerEditionList, help_text='The Shadowsocks server edition. The libev edition is recommended.')),
                ('is_v2ray_enabled', models.BooleanField(default=False, help_text='Whether the v2ray-plugin is enabled for Shadowsocks server. The changes made here will not affect the plugin status on server.')),
                ('is_server_enabled', models.BooleanField(default=False, help_text='Control the Shadowsocks server up or down. Works only with the Shadowsocks python edition local node.')),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ssmanagers', to='shadowsocksz.Node')),
            ],
            options={
                'verbose_name': 'Shadowsocks Manager',
            },
        ),
        migrations.AlterUniqueTogether(
            name='nodeaccount',
            unique_together=set([('node', 'account')]),
        ),
    ]
